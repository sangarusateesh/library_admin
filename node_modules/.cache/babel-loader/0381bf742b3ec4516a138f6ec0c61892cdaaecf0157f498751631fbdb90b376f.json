{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { throttle } from '../../../utils/throttle';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector, gridVisiblePinnedColumnDefinitionsSelector } from '../columns';\nimport { gridDimensionsSelector } from './gridDimensionsSelectors';\nimport { gridDensityFactorSelector } from '../density';\nimport { gridRenderContextSelector } from '../virtualization';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nconst EMPTY_SIZE = {\n  width: 0,\n  height: 0\n};\nconst EMPTY_DIMENSIONS = {\n  isReady: false,\n  root: EMPTY_SIZE,\n  viewportOuterSize: EMPTY_SIZE,\n  viewportInnerSize: EMPTY_SIZE,\n  contentSize: EMPTY_SIZE,\n  minimumSize: EMPTY_SIZE,\n  hasScrollX: false,\n  hasScrollY: false,\n  scrollbarSize: 0,\n  headerHeight: 0,\n  rowWidth: 0,\n  rowHeight: 0,\n  columnsTotalWidth: 0,\n  leftPinnedWidth: 0,\n  rightPinnedWidth: 0,\n  headersTotalHeight: 0,\n  topContainerHeight: 0,\n  bottomContainerHeight: 0\n};\nexport const dimensionsStateInitializer = state => {\n  const dimensions = EMPTY_DIMENSIONS;\n  return _extends({}, state, {\n    dimensions\n  });\n};\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(EMPTY_SIZE);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  const headerHeight = Math.floor(props.columnHeaderHeight * densityFactor);\n  const columnsTotalWidth = roundToDecimalPlaces(gridColumnsTotalWidthSelector(apiRef), 6);\n  const headersTotalHeight = getTotalHeaderHeight(apiRef, props.columnHeaderHeight);\n  const leftPinnedWidth = pinnedColumns.left.reduce((w, col) => w + col.computedWidth, 0);\n  const rightPinnedWidth = pinnedColumns.right.reduce((w, col) => w + col.computedWidth, 0);\n  const [savedSize, setSavedSize] = React.useState();\n  const debouncedSetSavedSize = React.useMemo(() => throttle(setSavedSize, props.resizeThrottleMs), [props.resizeThrottleMs]);\n  const previousSize = React.useRef();\n  const getRootDimensions = () => apiRef.current.state.dimensions;\n  const setDimensions = useEventCallback(dimensions => {\n    apiRef.current.setState(state => _extends({}, state, {\n      dimensions\n    }));\n  });\n  const resize = React.useCallback(() => {\n    const element = apiRef.current.mainElementRef.current;\n    if (!element) {\n      return;\n    }\n    const computedStyle = ownerWindow(element).getComputedStyle(element);\n    const height = parseFloat(computedStyle.height) || 0;\n    const width = parseFloat(computedStyle.width) || 0;\n    const hasHeightChanged = height !== previousSize.current?.height;\n    const hasWidthChanged = width !== previousSize.current?.width;\n    if (!previousSize.current || hasHeightChanged || hasWidthChanged) {\n      const size = {\n        width,\n        height\n      };\n      apiRef.current.publishEvent('resize', size);\n      previousSize.current = size;\n    }\n  }, [apiRef]);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = gridDimensionsSelector(apiRef.current.state);\n    if (!dimensions.isReady) {\n      return 0;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (props.getRowHeight) {\n      const renderContext = gridRenderContextSelector(apiRef);\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);\n  const updateDimensions = React.useCallback(() => {\n    const rootElement = apiRef.current.rootElementRef.current;\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    const scrollbarSize = measureScrollbarSize(rootElement, columnsTotalWidth, props.scrollbarSize);\n    const topContainerHeight = headersTotalHeight + pinnedRowsHeight.top;\n    const bottomContainerHeight = pinnedRowsHeight.bottom;\n    const nonPinnedColumnsTotalWidth = columnsTotalWidth - leftPinnedWidth - rightPinnedWidth;\n    const contentSize = {\n      width: nonPinnedColumnsTotalWidth,\n      height: rowsMeta.currentPageTotalHeight\n    };\n    let viewportOuterSize;\n    let viewportInnerSize;\n    let hasScrollX = false;\n    let hasScrollY = false;\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootDimensionsRef.current.width);\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: topContainerHeight + bottomContainerHeight + contentSize.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),\n        height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - leftPinnedWidth - rightPinnedWidth),\n        height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)\n      };\n      const content = contentSize;\n      const container = viewportInnerSize;\n      const hasScrollXIfNoYScrollBar = content.width > container.width;\n      const hasScrollYIfNoXScrollBar = content.height > container.height;\n      if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n        hasScrollY = hasScrollYIfNoXScrollBar;\n        hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;\n\n        // We recalculate the scroll y to consider the size of the x scrollbar.\n        if (hasScrollX) {\n          hasScrollY = content.height + scrollbarSize > container.height;\n        }\n      }\n      if (hasScrollY) {\n        viewportInnerSize.width -= scrollbarSize;\n      }\n      if (hasScrollX) {\n        viewportInnerSize.height -= scrollbarSize;\n      }\n    }\n    const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));\n    const minimumSize = {\n      width: columnsTotalWidth,\n      height: topContainerHeight + contentSize.height + bottomContainerHeight\n    };\n    const newDimensions = {\n      isReady: true,\n      root: rootDimensionsRef.current,\n      viewportOuterSize,\n      viewportInnerSize,\n      contentSize,\n      minimumSize,\n      hasScrollX,\n      hasScrollY,\n      scrollbarSize,\n      headerHeight,\n      rowWidth,\n      rowHeight,\n      columnsTotalWidth,\n      leftPinnedWidth,\n      rightPinnedWidth,\n      headersTotalHeight,\n      topContainerHeight,\n      bottomContainerHeight\n    };\n    const prevDimensions = apiRef.current.state.dimensions;\n    setDimensions(newDimensions);\n    if (newDimensions.viewportInnerSize.width !== prevDimensions.viewportInnerSize.width || newDimensions.viewportInnerSize.height !== prevDimensions.viewportInnerSize.height) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newDimensions.viewportInnerSize);\n    }\n    apiRef.current.updateRenderContext?.();\n  }, [apiRef, setDimensions, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, rowHeight, headerHeight, columnsTotalWidth, headersTotalHeight, leftPinnedWidth, rightPinnedWidth]);\n  const apiPublic = {\n    resize,\n    getRootDimensions\n  };\n  const apiPrivate = {\n    updateDimensions,\n    getViewportPageSize\n  };\n  useGridApiMethod(apiRef, apiPublic, 'public');\n  useGridApiMethod(apiRef, apiPrivate, 'private');\n  useEnhancedEffect(() => {\n    if (savedSize) {\n      updateDimensions();\n      apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n    }\n  }, [apiRef, savedSize, updateDimensions]);\n  const root = apiRef.current.rootElementRef.current;\n  const dimensions = apiRef.current.state.dimensions;\n  useEnhancedEffect(() => {\n    if (!root) {\n      return;\n    }\n    const set = (k, v) => root.style.setProperty(k, v);\n    set('--DataGrid-width', `${dimensions.viewportOuterSize.width}px`);\n    set('--DataGrid-hasScrollX', `${Number(dimensions.hasScrollX)}`);\n    set('--DataGrid-hasScrollY', `${Number(dimensions.hasScrollY)}`);\n    set('--DataGrid-scrollbarSize', `${dimensions.scrollbarSize}px`);\n    set('--DataGrid-rowWidth', `${dimensions.rowWidth}px`);\n    set('--DataGrid-columnsTotalWidth', `${dimensions.columnsTotalWidth}px`);\n    set('--DataGrid-leftPinnedWidth', `${dimensions.leftPinnedWidth}px`);\n    set('--DataGrid-rightPinnedWidth', `${dimensions.rightPinnedWidth}px`);\n    set('--DataGrid-headerHeight', `${dimensions.headerHeight}px`);\n    set('--DataGrid-headersTotalHeight', `${dimensions.headersTotalHeight}px`);\n    set('--DataGrid-topContainerHeight', `${dimensions.topContainerHeight}px`);\n    set('--DataGrid-bottomContainerHeight', `${dimensions.bottomContainerHeight}px`);\n    set('--height', `${dimensions.rowHeight}px`);\n  }, [root, dimensions]);\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size;\n\n    // jsdom has no layout capabilities\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      setSavedSize(size);\n      isFirstSizing.current = false;\n      return;\n    }\n    debouncedSetSavedSize(size);\n  }, [props.autoHeight, debouncedSetSavedSize, logger]);\n  useEnhancedEffect(updateDimensions, [updateDimensions]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateDimensions);\n  useGridApiOptionHandler(apiRef, 'paginationModelChange', updateDimensions);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateDimensions);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}\nfunction measureScrollbarSize(rootElement, columnsTotalWidth, scrollbarSize) {\n  if (scrollbarSize !== undefined) {\n    return scrollbarSize;\n  }\n  if (rootElement === null || columnsTotalWidth === 0) {\n    return 0;\n  }\n  const doc = ownerDocument(rootElement);\n  const scrollDiv = doc.createElement('div');\n  scrollDiv.style.width = '99px';\n  scrollDiv.style.height = '99px';\n  scrollDiv.style.position = 'absolute';\n  scrollDiv.style.overflow = 'scroll';\n  scrollDiv.className = 'scrollDiv';\n  rootElement.appendChild(scrollDiv);\n  const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  rootElement.removeChild(scrollDiv);\n  return size;\n}\n\n// Get rid of floating point imprecision errors\n// https://github.com/mui/mui-x/issues/9550#issuecomment-1619020477\nfunction roundToDecimalPlaces(value, decimals) {\n  return Math.round(value * 10 ** decimals) / 10 ** decimals;\n}","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useEventCallback","useEventCallback","unstable_ownerWindow","ownerWindow","useGridApiEventHandler","useGridApiOptionHandler","useGridApiMethod","throttle","useGridLogger","gridColumnsTotalWidthSelector","gridVisiblePinnedColumnDefinitionsSelector","gridDimensionsSelector","gridDensityFactorSelector","gridRenderContextSelector","useGridSelector","getVisibleRows","gridRowsMetaSelector","calculatePinnedRowsHeight","getTotalHeaderHeight","EMPTY_SIZE","width","height","EMPTY_DIMENSIONS","isReady","root","viewportOuterSize","viewportInnerSize","contentSize","minimumSize","hasScrollX","hasScrollY","scrollbarSize","headerHeight","rowWidth","rowHeight","columnsTotalWidth","leftPinnedWidth","rightPinnedWidth","headersTotalHeight","topContainerHeight","bottomContainerHeight","dimensionsStateInitializer","state","dimensions","useGridDimensions","apiRef","props","logger","errorShown","useRef","rootDimensionsRef","rowsMeta","pinnedColumns","densityFactor","Math","floor","columnHeaderHeight","roundToDecimalPlaces","left","reduce","w","col","computedWidth","right","savedSize","setSavedSize","useState","debouncedSetSavedSize","useMemo","resizeThrottleMs","previousSize","getRootDimensions","current","setDimensions","setState","resize","useCallback","element","mainElementRef","computedStyle","getComputedStyle","parseFloat","hasHeightChanged","hasWidthChanged","size","publishEvent","getViewportPageSize","currentPage","pagination","paginationMode","getRowHeight","renderContext","viewportPageSize","lastRowIndex","firstRowIndex","min","rows","length","maximumPageSizeWithoutScrollBar","updateDimensions","rootElement","rootElementRef","pinnedRowsHeight","measureScrollbarSize","top","bottom","nonPinnedColumnsTotalWidth","currentPageTotalHeight","autoHeight","round","max","content","container","hasScrollXIfNoYScrollBar","hasScrollYIfNoXScrollBar","newDimensions","prevDimensions","updateRenderContext","apiPublic","apiPrivate","set","k","v","style","setProperty","Number","isFirstSizing","handleResize","isJSDOM","test","window","navigator","userAgent","error","join","onResize","undefined","doc","scrollDiv","createElement","position","overflow","className","appendChild","offsetWidth","clientWidth","removeChild","value","decimals"],"sources":["/home/satheesh/Documents/React/lcommerce/node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { throttle } from '../../../utils/throttle';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector, gridVisiblePinnedColumnDefinitionsSelector } from '../columns';\nimport { gridDimensionsSelector } from './gridDimensionsSelectors';\nimport { gridDensityFactorSelector } from '../density';\nimport { gridRenderContextSelector } from '../virtualization';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nconst EMPTY_SIZE = {\n  width: 0,\n  height: 0\n};\nconst EMPTY_DIMENSIONS = {\n  isReady: false,\n  root: EMPTY_SIZE,\n  viewportOuterSize: EMPTY_SIZE,\n  viewportInnerSize: EMPTY_SIZE,\n  contentSize: EMPTY_SIZE,\n  minimumSize: EMPTY_SIZE,\n  hasScrollX: false,\n  hasScrollY: false,\n  scrollbarSize: 0,\n  headerHeight: 0,\n  rowWidth: 0,\n  rowHeight: 0,\n  columnsTotalWidth: 0,\n  leftPinnedWidth: 0,\n  rightPinnedWidth: 0,\n  headersTotalHeight: 0,\n  topContainerHeight: 0,\n  bottomContainerHeight: 0\n};\nexport const dimensionsStateInitializer = state => {\n  const dimensions = EMPTY_DIMENSIONS;\n  return _extends({}, state, {\n    dimensions\n  });\n};\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(EMPTY_SIZE);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  const headerHeight = Math.floor(props.columnHeaderHeight * densityFactor);\n  const columnsTotalWidth = roundToDecimalPlaces(gridColumnsTotalWidthSelector(apiRef), 6);\n  const headersTotalHeight = getTotalHeaderHeight(apiRef, props.columnHeaderHeight);\n  const leftPinnedWidth = pinnedColumns.left.reduce((w, col) => w + col.computedWidth, 0);\n  const rightPinnedWidth = pinnedColumns.right.reduce((w, col) => w + col.computedWidth, 0);\n  const [savedSize, setSavedSize] = React.useState();\n  const debouncedSetSavedSize = React.useMemo(() => throttle(setSavedSize, props.resizeThrottleMs), [props.resizeThrottleMs]);\n  const previousSize = React.useRef();\n  const getRootDimensions = () => apiRef.current.state.dimensions;\n  const setDimensions = useEventCallback(dimensions => {\n    apiRef.current.setState(state => _extends({}, state, {\n      dimensions\n    }));\n  });\n  const resize = React.useCallback(() => {\n    const element = apiRef.current.mainElementRef.current;\n    if (!element) {\n      return;\n    }\n    const computedStyle = ownerWindow(element).getComputedStyle(element);\n    const height = parseFloat(computedStyle.height) || 0;\n    const width = parseFloat(computedStyle.width) || 0;\n    const hasHeightChanged = height !== previousSize.current?.height;\n    const hasWidthChanged = width !== previousSize.current?.width;\n    if (!previousSize.current || hasHeightChanged || hasWidthChanged) {\n      const size = {\n        width,\n        height\n      };\n      apiRef.current.publishEvent('resize', size);\n      previousSize.current = size;\n    }\n  }, [apiRef]);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = gridDimensionsSelector(apiRef.current.state);\n    if (!dimensions.isReady) {\n      return 0;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (props.getRowHeight) {\n      const renderContext = gridRenderContextSelector(apiRef);\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);\n  const updateDimensions = React.useCallback(() => {\n    const rootElement = apiRef.current.rootElementRef.current;\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    const scrollbarSize = measureScrollbarSize(rootElement, columnsTotalWidth, props.scrollbarSize);\n    const topContainerHeight = headersTotalHeight + pinnedRowsHeight.top;\n    const bottomContainerHeight = pinnedRowsHeight.bottom;\n    const nonPinnedColumnsTotalWidth = columnsTotalWidth - leftPinnedWidth - rightPinnedWidth;\n    const contentSize = {\n      width: nonPinnedColumnsTotalWidth,\n      height: rowsMeta.currentPageTotalHeight\n    };\n    let viewportOuterSize;\n    let viewportInnerSize;\n    let hasScrollX = false;\n    let hasScrollY = false;\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootDimensionsRef.current.width);\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: topContainerHeight + bottomContainerHeight + contentSize.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),\n        height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - leftPinnedWidth - rightPinnedWidth),\n        height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)\n      };\n      const content = contentSize;\n      const container = viewportInnerSize;\n      const hasScrollXIfNoYScrollBar = content.width > container.width;\n      const hasScrollYIfNoXScrollBar = content.height > container.height;\n      if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n        hasScrollY = hasScrollYIfNoXScrollBar;\n        hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;\n\n        // We recalculate the scroll y to consider the size of the x scrollbar.\n        if (hasScrollX) {\n          hasScrollY = content.height + scrollbarSize > container.height;\n        }\n      }\n      if (hasScrollY) {\n        viewportInnerSize.width -= scrollbarSize;\n      }\n      if (hasScrollX) {\n        viewportInnerSize.height -= scrollbarSize;\n      }\n    }\n    const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));\n    const minimumSize = {\n      width: columnsTotalWidth,\n      height: topContainerHeight + contentSize.height + bottomContainerHeight\n    };\n    const newDimensions = {\n      isReady: true,\n      root: rootDimensionsRef.current,\n      viewportOuterSize,\n      viewportInnerSize,\n      contentSize,\n      minimumSize,\n      hasScrollX,\n      hasScrollY,\n      scrollbarSize,\n      headerHeight,\n      rowWidth,\n      rowHeight,\n      columnsTotalWidth,\n      leftPinnedWidth,\n      rightPinnedWidth,\n      headersTotalHeight,\n      topContainerHeight,\n      bottomContainerHeight\n    };\n    const prevDimensions = apiRef.current.state.dimensions;\n    setDimensions(newDimensions);\n    if (newDimensions.viewportInnerSize.width !== prevDimensions.viewportInnerSize.width || newDimensions.viewportInnerSize.height !== prevDimensions.viewportInnerSize.height) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newDimensions.viewportInnerSize);\n    }\n    apiRef.current.updateRenderContext?.();\n  }, [apiRef, setDimensions, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, rowHeight, headerHeight, columnsTotalWidth, headersTotalHeight, leftPinnedWidth, rightPinnedWidth]);\n  const apiPublic = {\n    resize,\n    getRootDimensions\n  };\n  const apiPrivate = {\n    updateDimensions,\n    getViewportPageSize\n  };\n  useGridApiMethod(apiRef, apiPublic, 'public');\n  useGridApiMethod(apiRef, apiPrivate, 'private');\n  useEnhancedEffect(() => {\n    if (savedSize) {\n      updateDimensions();\n      apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n    }\n  }, [apiRef, savedSize, updateDimensions]);\n  const root = apiRef.current.rootElementRef.current;\n  const dimensions = apiRef.current.state.dimensions;\n  useEnhancedEffect(() => {\n    if (!root) {\n      return;\n    }\n    const set = (k, v) => root.style.setProperty(k, v);\n    set('--DataGrid-width', `${dimensions.viewportOuterSize.width}px`);\n    set('--DataGrid-hasScrollX', `${Number(dimensions.hasScrollX)}`);\n    set('--DataGrid-hasScrollY', `${Number(dimensions.hasScrollY)}`);\n    set('--DataGrid-scrollbarSize', `${dimensions.scrollbarSize}px`);\n    set('--DataGrid-rowWidth', `${dimensions.rowWidth}px`);\n    set('--DataGrid-columnsTotalWidth', `${dimensions.columnsTotalWidth}px`);\n    set('--DataGrid-leftPinnedWidth', `${dimensions.leftPinnedWidth}px`);\n    set('--DataGrid-rightPinnedWidth', `${dimensions.rightPinnedWidth}px`);\n    set('--DataGrid-headerHeight', `${dimensions.headerHeight}px`);\n    set('--DataGrid-headersTotalHeight', `${dimensions.headersTotalHeight}px`);\n    set('--DataGrid-topContainerHeight', `${dimensions.topContainerHeight}px`);\n    set('--DataGrid-bottomContainerHeight', `${dimensions.bottomContainerHeight}px`);\n    set('--height', `${dimensions.rowHeight}px`);\n  }, [root, dimensions]);\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size;\n\n    // jsdom has no layout capabilities\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      setSavedSize(size);\n      isFirstSizing.current = false;\n      return;\n    }\n    debouncedSetSavedSize(size);\n  }, [props.autoHeight, debouncedSetSavedSize, logger]);\n  useEnhancedEffect(updateDimensions, [updateDimensions]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateDimensions);\n  useGridApiOptionHandler(apiRef, 'paginationModelChange', updateDimensions);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateDimensions);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}\nfunction measureScrollbarSize(rootElement, columnsTotalWidth, scrollbarSize) {\n  if (scrollbarSize !== undefined) {\n    return scrollbarSize;\n  }\n  if (rootElement === null || columnsTotalWidth === 0) {\n    return 0;\n  }\n  const doc = ownerDocument(rootElement);\n  const scrollDiv = doc.createElement('div');\n  scrollDiv.style.width = '99px';\n  scrollDiv.style.height = '99px';\n  scrollDiv.style.position = 'absolute';\n  scrollDiv.style.overflow = 'scroll';\n  scrollDiv.className = 'scrollDiv';\n  rootElement.appendChild(scrollDiv);\n  const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  rootElement.removeChild(scrollDiv);\n  return size;\n}\n\n// Get rid of floating point imprecision errors\n// https://github.com/mui/mui-x/issues/9550#issuecomment-1619020477\nfunction roundToDecimalPlaces(value, decimals) {\n  return Math.round(value * 10 ** decimals) / 10 ** decimals;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}