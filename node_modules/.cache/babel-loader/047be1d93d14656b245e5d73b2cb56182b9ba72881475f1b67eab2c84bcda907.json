{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridSortedRowEntriesSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n\n/**\n * @category Filtering\n */\nconst gridFilterStateSelector = state => state.filter;\n\n/**\n * Get the current filter model.\n * @category Filtering\n */\nexport const gridFilterModelSelector = createSelector(gridFilterStateSelector, filterState => filterState.filterModel);\n\n/**\n * Get the current quick filter values.\n * @category Filtering\n */\nexport const gridQuickFilterValuesSelector = createSelector(gridFilterModelSelector, filterModel => filterModel.quickFilterValues);\n\n/**\n * @category Visible rows\n * @ignore - do not document.\n */\nexport const gridVisibleRowsLookupSelector = state => state.visibleRowsLookup;\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilteredRowsLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredRowsLookup);\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilteredDescendantCountLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredDescendantCountLookup);\n\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport const gridExpandedSortedRowEntriesSelector = createSelectorMemoized(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, (visibleRowsLookup, sortedRows) => sortedRows.filter(row => visibleRowsLookup[row.id] !== false));\n\n/**\n * Get the id of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport const gridExpandedSortedRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, visibleSortedRowEntries => visibleSortedRowEntries.map(row => row.id));\n\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport const gridFilteredSortedRowEntriesSelector = createSelectorMemoized(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, (filteredRowsLookup, sortedRows) => sortedRows.filter(row => filteredRowsLookup[row.id] !== false));\n\n/**\n * Get the id of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport const gridFilteredSortedRowIdsSelector = createSelectorMemoized(gridFilteredSortedRowEntriesSelector, filteredSortedRowEntries => filteredSortedRowEntries.map(row => row.id));\n\n/**\n * Get the id and the model of the top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport const gridFilteredSortedTopLevelRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, (visibleSortedRows, rowTree, rowTreeDepth) => {\n  if (rowTreeDepth < 2) {\n    return visibleSortedRows;\n  }\n  return visibleSortedRows.filter(row => rowTree[row.id]?.depth === 0);\n});\n\n/**\n * Get the amount of rows accessible after the filtering process.\n * @category Filtering\n */\nexport const gridExpandedRowCountSelector = createSelector(gridExpandedSortedRowEntriesSelector, visibleSortedRows => visibleSortedRows.length);\n\n/**\n * Get the amount of top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport const gridFilteredTopLevelRowCountSelector = createSelector(gridFilteredSortedTopLevelRowEntriesSelector, visibleSortedTopLevelRows => visibleSortedTopLevelRows.length);\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilterActiveItemsSelector = createSelectorMemoized(gridFilterModelSelector, gridColumnLookupSelector, (filterModel, columnLookup) => filterModel.items?.filter(item => {\n  if (!item.field) {\n    return false;\n  }\n  const column = columnLookup[item.field];\n  if (!column?.filterOperators || column?.filterOperators?.length === 0) {\n    return false;\n  }\n  const filterOperator = column.filterOperators.find(operator => operator.value === item.operator);\n  if (!filterOperator) {\n    return false;\n  }\n  return !filterOperator.InputComponent || item.value != null && item.value?.toString() !== '';\n}));\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilterActiveItemsLookupSelector = createSelectorMemoized(gridFilterActiveItemsSelector, activeFilters => {\n  const result = activeFilters.reduce((res, filterItem) => {\n    if (!res[filterItem.field]) {\n      res[filterItem.field] = [filterItem];\n    } else {\n      res[filterItem.field].push(filterItem);\n    }\n    return res;\n  }, {});\n  return result;\n});","map":{"version":3,"names":["createSelector","createSelectorMemoized","gridSortedRowEntriesSelector","gridColumnLookupSelector","gridRowMaximumTreeDepthSelector","gridRowTreeSelector","gridFilterStateSelector","state","filter","gridFilterModelSelector","filterState","filterModel","gridQuickFilterValuesSelector","quickFilterValues","gridVisibleRowsLookupSelector","visibleRowsLookup","gridFilteredRowsLookupSelector","filteredRowsLookup","gridFilteredDescendantCountLookupSelector","filteredDescendantCountLookup","gridExpandedSortedRowEntriesSelector","sortedRows","row","id","gridExpandedSortedRowIdsSelector","visibleSortedRowEntries","map","gridFilteredSortedRowEntriesSelector","gridFilteredSortedRowIdsSelector","filteredSortedRowEntries","gridFilteredSortedTopLevelRowEntriesSelector","visibleSortedRows","rowTree","rowTreeDepth","depth","gridExpandedRowCountSelector","length","gridFilteredTopLevelRowCountSelector","visibleSortedTopLevelRows","gridFilterActiveItemsSelector","columnLookup","items","item","field","column","filterOperators","filterOperator","find","operator","value","InputComponent","toString","gridFilterActiveItemsLookupSelector","activeFilters","result","reduce","res","filterItem","push"],"sources":["/home/satheesh/Documents/React/lcommerce/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridSortedRowEntriesSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n\n/**\n * @category Filtering\n */\nconst gridFilterStateSelector = state => state.filter;\n\n/**\n * Get the current filter model.\n * @category Filtering\n */\nexport const gridFilterModelSelector = createSelector(gridFilterStateSelector, filterState => filterState.filterModel);\n\n/**\n * Get the current quick filter values.\n * @category Filtering\n */\nexport const gridQuickFilterValuesSelector = createSelector(gridFilterModelSelector, filterModel => filterModel.quickFilterValues);\n\n/**\n * @category Visible rows\n * @ignore - do not document.\n */\nexport const gridVisibleRowsLookupSelector = state => state.visibleRowsLookup;\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilteredRowsLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredRowsLookup);\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilteredDescendantCountLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredDescendantCountLookup);\n\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport const gridExpandedSortedRowEntriesSelector = createSelectorMemoized(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, (visibleRowsLookup, sortedRows) => sortedRows.filter(row => visibleRowsLookup[row.id] !== false));\n\n/**\n * Get the id of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport const gridExpandedSortedRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, visibleSortedRowEntries => visibleSortedRowEntries.map(row => row.id));\n\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport const gridFilteredSortedRowEntriesSelector = createSelectorMemoized(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, (filteredRowsLookup, sortedRows) => sortedRows.filter(row => filteredRowsLookup[row.id] !== false));\n\n/**\n * Get the id of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport const gridFilteredSortedRowIdsSelector = createSelectorMemoized(gridFilteredSortedRowEntriesSelector, filteredSortedRowEntries => filteredSortedRowEntries.map(row => row.id));\n\n/**\n * Get the id and the model of the top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport const gridFilteredSortedTopLevelRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, (visibleSortedRows, rowTree, rowTreeDepth) => {\n  if (rowTreeDepth < 2) {\n    return visibleSortedRows;\n  }\n  return visibleSortedRows.filter(row => rowTree[row.id]?.depth === 0);\n});\n\n/**\n * Get the amount of rows accessible after the filtering process.\n * @category Filtering\n */\nexport const gridExpandedRowCountSelector = createSelector(gridExpandedSortedRowEntriesSelector, visibleSortedRows => visibleSortedRows.length);\n\n/**\n * Get the amount of top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport const gridFilteredTopLevelRowCountSelector = createSelector(gridFilteredSortedTopLevelRowEntriesSelector, visibleSortedTopLevelRows => visibleSortedTopLevelRows.length);\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilterActiveItemsSelector = createSelectorMemoized(gridFilterModelSelector, gridColumnLookupSelector, (filterModel, columnLookup) => filterModel.items?.filter(item => {\n  if (!item.field) {\n    return false;\n  }\n  const column = columnLookup[item.field];\n  if (!column?.filterOperators || column?.filterOperators?.length === 0) {\n    return false;\n  }\n  const filterOperator = column.filterOperators.find(operator => operator.value === item.operator);\n  if (!filterOperator) {\n    return false;\n  }\n  return !filterOperator.InputComponent || item.value != null && item.value?.toString() !== '';\n}));\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilterActiveItemsLookupSelector = createSelectorMemoized(gridFilterActiveItemsSelector, activeFilters => {\n  const result = activeFilters.reduce((res, filterItem) => {\n    if (!res[filterItem.field]) {\n      res[filterItem.field] = [filterItem];\n    } else {\n      res[filterItem.field].push(filterItem);\n    }\n    return res;\n  }, {});\n  return result;\n});"],"mappings":"AAAA,SAASA,cAAc,EAAEC,sBAAsB,QAAQ,+BAA+B;AACtF,SAASC,4BAA4B,QAAQ,gCAAgC;AAC7E,SAASC,wBAAwB,QAAQ,gCAAgC;AACzE,SAASC,+BAA+B,EAAEC,mBAAmB,QAAQ,0BAA0B;;AAE/F;AACA;AACA;AACA,MAAMC,uBAAuB,GAAGC,KAAK,IAAIA,KAAK,CAACC,MAAM;;AAErD;AACA;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAGT,cAAc,CAACM,uBAAuB,EAAEI,WAAW,IAAIA,WAAW,CAACC,WAAW,CAAC;;AAEtH;AACA;AACA;AACA;AACA,OAAO,MAAMC,6BAA6B,GAAGZ,cAAc,CAACS,uBAAuB,EAAEE,WAAW,IAAIA,WAAW,CAACE,iBAAiB,CAAC;;AAElI;AACA;AACA;AACA;AACA,OAAO,MAAMC,6BAA6B,GAAGP,KAAK,IAAIA,KAAK,CAACQ,iBAAiB;;AAE7E;AACA;AACA;AACA;AACA,OAAO,MAAMC,8BAA8B,GAAGhB,cAAc,CAACM,uBAAuB,EAAEI,WAAW,IAAIA,WAAW,CAACO,kBAAkB,CAAC;;AAEpI;AACA;AACA;AACA;AACA,OAAO,MAAMC,yCAAyC,GAAGlB,cAAc,CAACM,uBAAuB,EAAEI,WAAW,IAAIA,WAAW,CAACS,6BAA6B,CAAC;;AAE1J;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oCAAoC,GAAGnB,sBAAsB,CAACa,6BAA6B,EAAEZ,4BAA4B,EAAE,CAACa,iBAAiB,EAAEM,UAAU,KAAKA,UAAU,CAACb,MAAM,CAACc,GAAG,IAAIP,iBAAiB,CAACO,GAAG,CAACC,EAAE,CAAC,KAAK,KAAK,CAAC,CAAC;;AAEzO;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gCAAgC,GAAGvB,sBAAsB,CAACmB,oCAAoC,EAAEK,uBAAuB,IAAIA,uBAAuB,CAACC,GAAG,CAACJ,GAAG,IAAIA,GAAG,CAACC,EAAE,CAAC,CAAC;;AAEnL;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,oCAAoC,GAAG1B,sBAAsB,CAACe,8BAA8B,EAAEd,4BAA4B,EAAE,CAACe,kBAAkB,EAAEI,UAAU,KAAKA,UAAU,CAACb,MAAM,CAACc,GAAG,IAAIL,kBAAkB,CAACK,GAAG,CAACC,EAAE,CAAC,KAAK,KAAK,CAAC,CAAC;;AAE5O;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,gCAAgC,GAAG3B,sBAAsB,CAAC0B,oCAAoC,EAAEE,wBAAwB,IAAIA,wBAAwB,CAACH,GAAG,CAACJ,GAAG,IAAIA,GAAG,CAACC,EAAE,CAAC,CAAC;;AAErL;AACA;AACA;AACA;AACA,OAAO,MAAMO,4CAA4C,GAAG7B,sBAAsB,CAACmB,oCAAoC,EAAEf,mBAAmB,EAAED,+BAA+B,EAAE,CAAC2B,iBAAiB,EAAEC,OAAO,EAAEC,YAAY,KAAK;EAC3N,IAAIA,YAAY,GAAG,CAAC,EAAE;IACpB,OAAOF,iBAAiB;EAC1B;EACA,OAAOA,iBAAiB,CAACvB,MAAM,CAACc,GAAG,IAAIU,OAAO,CAACV,GAAG,CAACC,EAAE,CAAC,EAAEW,KAAK,KAAK,CAAC,CAAC;AACtE,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMC,4BAA4B,GAAGnC,cAAc,CAACoB,oCAAoC,EAAEW,iBAAiB,IAAIA,iBAAiB,CAACK,MAAM,CAAC;;AAE/I;AACA;AACA;AACA;AACA,OAAO,MAAMC,oCAAoC,GAAGrC,cAAc,CAAC8B,4CAA4C,EAAEQ,yBAAyB,IAAIA,yBAAyB,CAACF,MAAM,CAAC;;AAE/K;AACA;AACA;AACA;AACA,OAAO,MAAMG,6BAA6B,GAAGtC,sBAAsB,CAACQ,uBAAuB,EAAEN,wBAAwB,EAAE,CAACQ,WAAW,EAAE6B,YAAY,KAAK7B,WAAW,CAAC8B,KAAK,EAAEjC,MAAM,CAACkC,IAAI,IAAI;EACtL,IAAI,CAACA,IAAI,CAACC,KAAK,EAAE;IACf,OAAO,KAAK;EACd;EACA,MAAMC,MAAM,GAAGJ,YAAY,CAACE,IAAI,CAACC,KAAK,CAAC;EACvC,IAAI,CAACC,MAAM,EAAEC,eAAe,IAAID,MAAM,EAAEC,eAAe,EAAET,MAAM,KAAK,CAAC,EAAE;IACrE,OAAO,KAAK;EACd;EACA,MAAMU,cAAc,GAAGF,MAAM,CAACC,eAAe,CAACE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,KAAK,KAAKP,IAAI,CAACM,QAAQ,CAAC;EAChG,IAAI,CAACF,cAAc,EAAE;IACnB,OAAO,KAAK;EACd;EACA,OAAO,CAACA,cAAc,CAACI,cAAc,IAAIR,IAAI,CAACO,KAAK,IAAI,IAAI,IAAIP,IAAI,CAACO,KAAK,EAAEE,QAAQ,CAAC,CAAC,KAAK,EAAE;AAC9F,CAAC,CAAC,CAAC;AACH;AACA;AACA;AACA;AACA,OAAO,MAAMC,mCAAmC,GAAGnD,sBAAsB,CAACsC,6BAA6B,EAAEc,aAAa,IAAI;EACxH,MAAMC,MAAM,GAAGD,aAAa,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,UAAU,KAAK;IACvD,IAAI,CAACD,GAAG,CAACC,UAAU,CAACd,KAAK,CAAC,EAAE;MAC1Ba,GAAG,CAACC,UAAU,CAACd,KAAK,CAAC,GAAG,CAACc,UAAU,CAAC;IACtC,CAAC,MAAM;MACLD,GAAG,CAACC,UAAU,CAACd,KAAK,CAAC,CAACe,IAAI,CAACD,UAAU,CAAC;IACxC;IACA,OAAOD,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EACN,OAAOF,MAAM;AACf,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}