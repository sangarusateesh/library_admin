{"ast":null,"code":"import * as React from 'react';\nimport { styled } from '@mui/system';\nimport { fastMemo } from '../../utils/fastMemo';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { gridDimensionsSelector } from '../../hooks/features/dimensions';\nimport { gridClasses } from '../../constants';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst Filler = styled('div')({\n  display: 'flex',\n  flexDirection: 'row',\n  width: 'var(--DataGrid-rowWidth)',\n  boxSizing: 'border-box'\n});\nconst Pinned = styled('div')({\n  position: 'sticky',\n  height: '100%',\n  boxSizing: 'border-box',\n  borderTop: '1px solid var(--DataGrid-rowBorderColor)',\n  backgroundColor: 'var(--DataGrid-pinnedBackground)'\n});\nconst PinnedLeft = styled(Pinned)({\n  left: 0,\n  borderRight: '1px solid var(--DataGrid-rowBorderColor)'\n});\nconst PinnedRight = styled(Pinned)({\n  right: 0,\n  borderLeft: '1px solid var(--DataGrid-rowBorderColor)'\n});\nconst Main = styled('div')({\n  flexGrow: 1,\n  borderTop: '1px solid var(--DataGrid-rowBorderColor)'\n});\nfunction GridVirtualScrollerFiller() {\n  const apiRef = useGridApiContext();\n  const {\n    viewportOuterSize,\n    minimumSize,\n    hasScrollX,\n    hasScrollY,\n    scrollbarSize,\n    leftPinnedWidth,\n    rightPinnedWidth\n  } = useGridSelector(apiRef, gridDimensionsSelector);\n  const scrollbarHeight = hasScrollX ? scrollbarSize : 0;\n  const expandedHeight = viewportOuterSize.height - minimumSize.height - scrollbarHeight;\n  const height = Math.max(scrollbarHeight, expandedHeight);\n  if (height === 0) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxs(Filler, {\n    className: gridClasses.filler,\n    role: \"presentation\",\n    style: {\n      height\n    },\n    children: [leftPinnedWidth > 0 && /*#__PURE__*/_jsx(PinnedLeft, {\n      className: gridClasses['filler--pinnedLeft'],\n      style: {\n        width: leftPinnedWidth\n      }\n    }), /*#__PURE__*/_jsx(Main, {}), rightPinnedWidth > 0 && /*#__PURE__*/_jsx(PinnedRight, {\n      className: gridClasses['filler--pinnedRight'],\n      style: {\n        width: rightPinnedWidth + (hasScrollY ? scrollbarSize : 0)\n      }\n    })]\n  });\n}\nconst Memoized = fastMemo(GridVirtualScrollerFiller);\nexport { Memoized as GridVirtualScrollerFiller };","map":{"version":3,"names":["React","styled","fastMemo","useGridSelector","useGridApiContext","gridDimensionsSelector","gridClasses","jsx","_jsx","jsxs","_jsxs","Filler","display","flexDirection","width","boxSizing","Pinned","position","height","borderTop","backgroundColor","PinnedLeft","left","borderRight","PinnedRight","right","borderLeft","Main","flexGrow","GridVirtualScrollerFiller","apiRef","viewportOuterSize","minimumSize","hasScrollX","hasScrollY","scrollbarSize","leftPinnedWidth","rightPinnedWidth","scrollbarHeight","expandedHeight","Math","max","className","filler","role","style","children","Memoized"],"sources":["/home/satheesh/Documents/React/lcommerce/node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollerFiller.js"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/system';\nimport { fastMemo } from '../../utils/fastMemo';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { gridDimensionsSelector } from '../../hooks/features/dimensions';\nimport { gridClasses } from '../../constants';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst Filler = styled('div')({\n  display: 'flex',\n  flexDirection: 'row',\n  width: 'var(--DataGrid-rowWidth)',\n  boxSizing: 'border-box'\n});\nconst Pinned = styled('div')({\n  position: 'sticky',\n  height: '100%',\n  boxSizing: 'border-box',\n  borderTop: '1px solid var(--DataGrid-rowBorderColor)',\n  backgroundColor: 'var(--DataGrid-pinnedBackground)'\n});\nconst PinnedLeft = styled(Pinned)({\n  left: 0,\n  borderRight: '1px solid var(--DataGrid-rowBorderColor)'\n});\nconst PinnedRight = styled(Pinned)({\n  right: 0,\n  borderLeft: '1px solid var(--DataGrid-rowBorderColor)'\n});\nconst Main = styled('div')({\n  flexGrow: 1,\n  borderTop: '1px solid var(--DataGrid-rowBorderColor)'\n});\nfunction GridVirtualScrollerFiller() {\n  const apiRef = useGridApiContext();\n  const {\n    viewportOuterSize,\n    minimumSize,\n    hasScrollX,\n    hasScrollY,\n    scrollbarSize,\n    leftPinnedWidth,\n    rightPinnedWidth\n  } = useGridSelector(apiRef, gridDimensionsSelector);\n  const scrollbarHeight = hasScrollX ? scrollbarSize : 0;\n  const expandedHeight = viewportOuterSize.height - minimumSize.height - scrollbarHeight;\n  const height = Math.max(scrollbarHeight, expandedHeight);\n  if (height === 0) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxs(Filler, {\n    className: gridClasses.filler,\n    role: \"presentation\",\n    style: {\n      height\n    },\n    children: [leftPinnedWidth > 0 && /*#__PURE__*/_jsx(PinnedLeft, {\n      className: gridClasses['filler--pinnedLeft'],\n      style: {\n        width: leftPinnedWidth\n      }\n    }), /*#__PURE__*/_jsx(Main, {}), rightPinnedWidth > 0 && /*#__PURE__*/_jsx(PinnedRight, {\n      className: gridClasses['filler--pinnedRight'],\n      style: {\n        width: rightPinnedWidth + (hasScrollY ? scrollbarSize : 0)\n      }\n    })]\n  });\n}\nconst Memoized = fastMemo(GridVirtualScrollerFiller);\nexport { Memoized as GridVirtualScrollerFiller };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}