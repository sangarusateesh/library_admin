{"ast":null,"code":"/**\n * @deprecated there is no meaninfuly logic abstracted, use event.key directly.\n */\nexport const isEscapeKey = key => key === 'Escape';\n\n/**\n * @deprecated there is no meaninfuly logic abstracted, use event.key directly.\n */\nexport const isTabKey = key => key === 'Tab';\n\n// Non printable keys have a name, for example \"ArrowRight\", see the whole list:\n// https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values\n// So event.key.length === 1 is often enough.\n//\n// However, we also need to ignore shortcuts, for example: select all:\n// - Windows: Ctrl+A, event.ctrlKey is true\n// - macOS: ⌘ Command+A, event.metaKey is true\nexport function isPrintableKey(event) {\n  return event.key.length === 1 && !event.ctrlKey && !event.metaKey;\n}\nexport const GRID_MULTIPLE_SELECTION_KEYS = ['Meta', 'Control', 'Shift'];\nexport const GRID_CELL_EXIT_EDIT_MODE_KEYS = ['Enter', 'Escape', 'Tab'];\nexport const GRID_CELL_EDIT_COMMIT_KEYS = ['Enter', 'Tab'];\nexport const isMultipleKey = key => GRID_MULTIPLE_SELECTION_KEYS.indexOf(key) > -1;\nexport const isCellEnterEditModeKeys = event => isPrintableKey(event) || event.key === 'Enter' || event.key === 'Backspace' || event.key === 'Delete';\nexport const isCellExitEditModeKeys = key => GRID_CELL_EXIT_EDIT_MODE_KEYS.indexOf(key) > -1;\nexport const isCellEditCommitKeys = key => GRID_CELL_EDIT_COMMIT_KEYS.indexOf(key) > -1;\nexport const isNavigationKey = key => key.indexOf('Arrow') === 0 || key.indexOf('Page') === 0 || key === ' ' || key === 'Home' || key === 'End';\nexport const isKeyboardEvent = event => !!event.key;\nexport const isHideMenuKey = key => isTabKey(key) || isEscapeKey(key);\n\n// In theory, on macOS, ctrl + v doesn't trigger a paste, so the function should return false.\n// However, maybe it's overkill to fix, so let's be lazy.\nexport function isPasteShortcut(event) {\n  if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === 'v' && !event.shiftKey && !event.altKey) {\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["isEscapeKey","key","isTabKey","isPrintableKey","event","length","ctrlKey","metaKey","GRID_MULTIPLE_SELECTION_KEYS","GRID_CELL_EXIT_EDIT_MODE_KEYS","GRID_CELL_EDIT_COMMIT_KEYS","isMultipleKey","indexOf","isCellEnterEditModeKeys","isCellExitEditModeKeys","isCellEditCommitKeys","isNavigationKey","isKeyboardEvent","isHideMenuKey","isPasteShortcut","toLowerCase","shiftKey","altKey"],"sources":["/home/satheesh/Documents/React/lcommerce/node_modules/@mui/x-data-grid/utils/keyboardUtils.js"],"sourcesContent":["/**\n * @deprecated there is no meaninfuly logic abstracted, use event.key directly.\n */\nexport const isEscapeKey = key => key === 'Escape';\n\n/**\n * @deprecated there is no meaninfuly logic abstracted, use event.key directly.\n */\nexport const isTabKey = key => key === 'Tab';\n\n// Non printable keys have a name, for example \"ArrowRight\", see the whole list:\n// https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values\n// So event.key.length === 1 is often enough.\n//\n// However, we also need to ignore shortcuts, for example: select all:\n// - Windows: Ctrl+A, event.ctrlKey is true\n// - macOS: ⌘ Command+A, event.metaKey is true\nexport function isPrintableKey(event) {\n  return event.key.length === 1 && !event.ctrlKey && !event.metaKey;\n}\nexport const GRID_MULTIPLE_SELECTION_KEYS = ['Meta', 'Control', 'Shift'];\nexport const GRID_CELL_EXIT_EDIT_MODE_KEYS = ['Enter', 'Escape', 'Tab'];\nexport const GRID_CELL_EDIT_COMMIT_KEYS = ['Enter', 'Tab'];\nexport const isMultipleKey = key => GRID_MULTIPLE_SELECTION_KEYS.indexOf(key) > -1;\nexport const isCellEnterEditModeKeys = event => isPrintableKey(event) || event.key === 'Enter' || event.key === 'Backspace' || event.key === 'Delete';\nexport const isCellExitEditModeKeys = key => GRID_CELL_EXIT_EDIT_MODE_KEYS.indexOf(key) > -1;\nexport const isCellEditCommitKeys = key => GRID_CELL_EDIT_COMMIT_KEYS.indexOf(key) > -1;\nexport const isNavigationKey = key => key.indexOf('Arrow') === 0 || key.indexOf('Page') === 0 || key === ' ' || key === 'Home' || key === 'End';\nexport const isKeyboardEvent = event => !!event.key;\nexport const isHideMenuKey = key => isTabKey(key) || isEscapeKey(key);\n\n// In theory, on macOS, ctrl + v doesn't trigger a paste, so the function should return false.\n// However, maybe it's overkill to fix, so let's be lazy.\nexport function isPasteShortcut(event) {\n  if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === 'v' && !event.shiftKey && !event.altKey) {\n    return true;\n  }\n  return false;\n}"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,WAAW,GAAGC,GAAG,IAAIA,GAAG,KAAK,QAAQ;;AAElD;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGD,GAAG,IAAIA,GAAG,KAAK,KAAK;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,cAAcA,CAACC,KAAK,EAAE;EACpC,OAAOA,KAAK,CAACH,GAAG,CAACI,MAAM,KAAK,CAAC,IAAI,CAACD,KAAK,CAACE,OAAO,IAAI,CAACF,KAAK,CAACG,OAAO;AACnE;AACA,OAAO,MAAMC,4BAA4B,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC;AACxE,OAAO,MAAMC,6BAA6B,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC;AACvE,OAAO,MAAMC,0BAA0B,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;AAC1D,OAAO,MAAMC,aAAa,GAAGV,GAAG,IAAIO,4BAA4B,CAACI,OAAO,CAACX,GAAG,CAAC,GAAG,CAAC,CAAC;AAClF,OAAO,MAAMY,uBAAuB,GAAGT,KAAK,IAAID,cAAc,CAACC,KAAK,CAAC,IAAIA,KAAK,CAACH,GAAG,KAAK,OAAO,IAAIG,KAAK,CAACH,GAAG,KAAK,WAAW,IAAIG,KAAK,CAACH,GAAG,KAAK,QAAQ;AACrJ,OAAO,MAAMa,sBAAsB,GAAGb,GAAG,IAAIQ,6BAA6B,CAACG,OAAO,CAACX,GAAG,CAAC,GAAG,CAAC,CAAC;AAC5F,OAAO,MAAMc,oBAAoB,GAAGd,GAAG,IAAIS,0BAA0B,CAACE,OAAO,CAACX,GAAG,CAAC,GAAG,CAAC,CAAC;AACvF,OAAO,MAAMe,eAAe,GAAGf,GAAG,IAAIA,GAAG,CAACW,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAIX,GAAG,CAACW,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAIX,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,KAAK;AAC/I,OAAO,MAAMgB,eAAe,GAAGb,KAAK,IAAI,CAAC,CAACA,KAAK,CAACH,GAAG;AACnD,OAAO,MAAMiB,aAAa,GAAGjB,GAAG,IAAIC,QAAQ,CAACD,GAAG,CAAC,IAAID,WAAW,CAACC,GAAG,CAAC;;AAErE;AACA;AACA,OAAO,SAASkB,eAAeA,CAACf,KAAK,EAAE;EACrC,IAAI,CAACA,KAAK,CAACE,OAAO,IAAIF,KAAK,CAACG,OAAO,KAAKH,KAAK,CAACH,GAAG,CAACmB,WAAW,CAAC,CAAC,KAAK,GAAG,IAAI,CAAChB,KAAK,CAACiB,QAAQ,IAAI,CAACjB,KAAK,CAACkB,MAAM,EAAE;IAC3G,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}