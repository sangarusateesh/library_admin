{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nconst gridRowsStateSelector = state => state.rows;\nexport const gridRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalRowCount);\nexport const gridRowsLoadingSelector = createSelector(gridRowsStateSelector, rows => rows.loading);\nexport const gridTopLevelRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalTopLevelRowCount);\n\n// TODO rows v6: Rename\nexport const gridRowsLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToModelLookup);\nexport const gridRowsDataRowIdToIdLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToIdLookup);\nexport const gridRowTreeSelector = createSelector(gridRowsStateSelector, rows => rows.tree);\nexport const gridRowGroupingNameSelector = createSelector(gridRowsStateSelector, rows => rows.groupingName);\nexport const gridRowTreeDepthsSelector = createSelector(gridRowsStateSelector, rows => rows.treeDepths);\nexport const gridRowMaximumTreeDepthSelector = createSelectorMemoized(gridRowsStateSelector, rows => {\n  const entries = Object.entries(rows.treeDepths);\n  if (entries.length === 0) {\n    return 1;\n  }\n  return entries.filter(([, nodeCount]) => nodeCount > 0).map(([depth]) => Number(depth)).sort((a, b) => b - a)[0] + 1;\n});\nexport const gridDataRowIdsSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIds);\n\n/**\n * @ignore - do not document.\n */\nexport const gridAdditionalRowGroupsSelector = createSelector(gridRowsStateSelector, rows => rows?.additionalRowGroups);\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsSelector = createSelectorMemoized(gridAdditionalRowGroupsSelector, additionalRowGroups => {\n  const rawPinnedRows = additionalRowGroups?.pinnedRows;\n  return {\n    bottom: rawPinnedRows?.bottom?.map(rowEntry => ({\n      id: rowEntry.id,\n      model: rowEntry.model ?? {}\n    })) ?? [],\n    top: rawPinnedRows?.top?.map(rowEntry => ({\n      id: rowEntry.id,\n      model: rowEntry.model ?? {}\n    })) ?? []\n  };\n});\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsCountSelector = createSelector(gridPinnedRowsSelector, pinnedRows => {\n  return (pinnedRows?.top?.length || 0) + (pinnedRows?.bottom?.length || 0);\n});","map":{"version":3,"names":["createSelector","createSelectorMemoized","gridRowsStateSelector","state","rows","gridRowCountSelector","totalRowCount","gridRowsLoadingSelector","loading","gridTopLevelRowCountSelector","totalTopLevelRowCount","gridRowsLookupSelector","dataRowIdToModelLookup","gridRowsDataRowIdToIdLookupSelector","dataRowIdToIdLookup","gridRowTreeSelector","tree","gridRowGroupingNameSelector","groupingName","gridRowTreeDepthsSelector","treeDepths","gridRowMaximumTreeDepthSelector","entries","Object","length","filter","nodeCount","map","depth","Number","sort","a","b","gridDataRowIdsSelector","dataRowIds","gridAdditionalRowGroupsSelector","additionalRowGroups","gridPinnedRowsSelector","rawPinnedRows","pinnedRows","bottom","rowEntry","id","model","top","gridPinnedRowsCountSelector"],"sources":["/home/satheesh/Documents/React/lcommerce/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nconst gridRowsStateSelector = state => state.rows;\nexport const gridRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalRowCount);\nexport const gridRowsLoadingSelector = createSelector(gridRowsStateSelector, rows => rows.loading);\nexport const gridTopLevelRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalTopLevelRowCount);\n\n// TODO rows v6: Rename\nexport const gridRowsLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToModelLookup);\nexport const gridRowsDataRowIdToIdLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToIdLookup);\nexport const gridRowTreeSelector = createSelector(gridRowsStateSelector, rows => rows.tree);\nexport const gridRowGroupingNameSelector = createSelector(gridRowsStateSelector, rows => rows.groupingName);\nexport const gridRowTreeDepthsSelector = createSelector(gridRowsStateSelector, rows => rows.treeDepths);\nexport const gridRowMaximumTreeDepthSelector = createSelectorMemoized(gridRowsStateSelector, rows => {\n  const entries = Object.entries(rows.treeDepths);\n  if (entries.length === 0) {\n    return 1;\n  }\n  return entries.filter(([, nodeCount]) => nodeCount > 0).map(([depth]) => Number(depth)).sort((a, b) => b - a)[0] + 1;\n});\nexport const gridDataRowIdsSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIds);\n\n/**\n * @ignore - do not document.\n */\nexport const gridAdditionalRowGroupsSelector = createSelector(gridRowsStateSelector, rows => rows?.additionalRowGroups);\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsSelector = createSelectorMemoized(gridAdditionalRowGroupsSelector, additionalRowGroups => {\n  const rawPinnedRows = additionalRowGroups?.pinnedRows;\n  return {\n    bottom: rawPinnedRows?.bottom?.map(rowEntry => ({\n      id: rowEntry.id,\n      model: rowEntry.model ?? {}\n    })) ?? [],\n    top: rawPinnedRows?.top?.map(rowEntry => ({\n      id: rowEntry.id,\n      model: rowEntry.model ?? {}\n    })) ?? []\n  };\n});\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsCountSelector = createSelector(gridPinnedRowsSelector, pinnedRows => {\n  return (pinnedRows?.top?.length || 0) + (pinnedRows?.bottom?.length || 0);\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}