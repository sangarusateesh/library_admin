{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\n\n/**\n * @category Sorting\n * @ignore - do not document.\n */\nconst gridSortingStateSelector = state => state.sorting;\n\n/**\n * Get the id of the rows after the sorting process.\n * @category Sorting\n */\nexport const gridSortedRowIdsSelector = createSelector(gridSortingStateSelector, sortingState => sortingState.sortedRows);\n\n/**\n * Get the id and the model of the rows after the sorting process.\n * @category Sorting\n */\nexport const gridSortedRowEntriesSelector = createSelectorMemoized(gridSortedRowIdsSelector, gridRowsLookupSelector,\n// TODO rows v6: Is this the best approach ?\n(sortedIds, idRowsLookup) => sortedIds.map(id => ({\n  id,\n  model: idRowsLookup[id] ?? {}\n})));\n\n/**\n * Get the current sorting model.\n * @category Sorting\n */\nexport const gridSortModelSelector = createSelector(gridSortingStateSelector, sorting => sorting.sortModel);\n/**\n * @category Sorting\n * @ignore - do not document.\n */\nexport const gridSortColumnLookupSelector = createSelectorMemoized(gridSortModelSelector, sortModel => {\n  const result = sortModel.reduce((res, sortItem, index) => {\n    res[sortItem.field] = {\n      sortDirection: sortItem.sort,\n      sortIndex: sortModel.length > 1 ? index + 1 : undefined\n    };\n    return res;\n  }, {});\n  return result;\n});","map":{"version":3,"names":["createSelector","createSelectorMemoized","gridRowsLookupSelector","gridSortingStateSelector","state","sorting","gridSortedRowIdsSelector","sortingState","sortedRows","gridSortedRowEntriesSelector","sortedIds","idRowsLookup","map","id","model","gridSortModelSelector","sortModel","gridSortColumnLookupSelector","result","reduce","res","sortItem","index","field","sortDirection","sort","sortIndex","length","undefined"],"sources":["/home/satheesh/Documents/React/lcommerce/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\n\n/**\n * @category Sorting\n * @ignore - do not document.\n */\nconst gridSortingStateSelector = state => state.sorting;\n\n/**\n * Get the id of the rows after the sorting process.\n * @category Sorting\n */\nexport const gridSortedRowIdsSelector = createSelector(gridSortingStateSelector, sortingState => sortingState.sortedRows);\n\n/**\n * Get the id and the model of the rows after the sorting process.\n * @category Sorting\n */\nexport const gridSortedRowEntriesSelector = createSelectorMemoized(gridSortedRowIdsSelector, gridRowsLookupSelector,\n// TODO rows v6: Is this the best approach ?\n(sortedIds, idRowsLookup) => sortedIds.map(id => ({\n  id,\n  model: idRowsLookup[id] ?? {}\n})));\n\n/**\n * Get the current sorting model.\n * @category Sorting\n */\nexport const gridSortModelSelector = createSelector(gridSortingStateSelector, sorting => sorting.sortModel);\n/**\n * @category Sorting\n * @ignore - do not document.\n */\nexport const gridSortColumnLookupSelector = createSelectorMemoized(gridSortModelSelector, sortModel => {\n  const result = sortModel.reduce((res, sortItem, index) => {\n    res[sortItem.field] = {\n      sortDirection: sortItem.sort,\n      sortIndex: sortModel.length > 1 ? index + 1 : undefined\n    };\n    return res;\n  }, {});\n  return result;\n});"],"mappings":"AAAA,SAASA,cAAc,EAAEC,sBAAsB,QAAQ,+BAA+B;AACtF,SAASC,sBAAsB,QAAQ,0BAA0B;;AAEjE;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,GAAGC,KAAK,IAAIA,KAAK,CAACC,OAAO;;AAEvD;AACA;AACA;AACA;AACA,OAAO,MAAMC,wBAAwB,GAAGN,cAAc,CAACG,wBAAwB,EAAEI,YAAY,IAAIA,YAAY,CAACC,UAAU,CAAC;;AAEzH;AACA;AACA;AACA;AACA,OAAO,MAAMC,4BAA4B,GAAGR,sBAAsB,CAACK,wBAAwB,EAAEJ,sBAAsB;AACnH;AACA,CAACQ,SAAS,EAAEC,YAAY,KAAKD,SAAS,CAACE,GAAG,CAACC,EAAE,KAAK;EAChDA,EAAE;EACFC,KAAK,EAAEH,YAAY,CAACE,EAAE,CAAC,IAAI,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA;AACA,OAAO,MAAME,qBAAqB,GAAGf,cAAc,CAACG,wBAAwB,EAAEE,OAAO,IAAIA,OAAO,CAACW,SAAS,CAAC;AAC3G;AACA;AACA;AACA;AACA,OAAO,MAAMC,4BAA4B,GAAGhB,sBAAsB,CAACc,qBAAqB,EAAEC,SAAS,IAAI;EACrG,MAAME,MAAM,GAAGF,SAAS,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,QAAQ,EAAEC,KAAK,KAAK;IACxDF,GAAG,CAACC,QAAQ,CAACE,KAAK,CAAC,GAAG;MACpBC,aAAa,EAAEH,QAAQ,CAACI,IAAI;MAC5BC,SAAS,EAAEV,SAAS,CAACW,MAAM,GAAG,CAAC,GAAGL,KAAK,GAAG,CAAC,GAAGM;IAChD,CAAC;IACD,OAAOR,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EACN,OAAOF,MAAM;AACf,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}