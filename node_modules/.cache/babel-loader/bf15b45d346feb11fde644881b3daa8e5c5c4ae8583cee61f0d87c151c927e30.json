{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridFilteredTopLevelRowCountSelector } from '../filter';\nimport { useGridLogger, useGridSelector, useGridApiMethod } from '../../utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPaginationRowCountSelector } from './gridPaginationSelector';\nimport { noRowCountInServerMode } from './gridPaginationUtils';\n\n/**\n * @requires useGridFilter (state)\n * @requires useGridDimensions (event) - can be after\n */\nexport const useGridRowCount = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridRowCount');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);\n  const rowCount = useGridSelector(apiRef, gridPaginationRowCountSelector);\n  apiRef.current.registerControlState({\n    stateId: 'paginationRowCount',\n    propModel: props.rowCount,\n    propOnChange: props.onRowCountChange,\n    stateSelector: gridPaginationRowCountSelector,\n    changeEvent: 'rowCountChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setRowCount = React.useCallback(newRowCount => {\n    if (rowCount === newRowCount) {\n      return;\n    }\n    logger.debug(\"Setting 'rowCount' to\", newRowCount);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        rowCount: newRowCount\n      })\n    }));\n  }, [apiRef, logger, rowCount]);\n  const paginationRowCountApi = {\n    setRowCount\n  };\n  useGridApiMethod(apiRef, paginationRowCountApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const exportedRowCount = gridPaginationRowCountSelector(apiRef);\n    const shouldExportRowCount =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `rowCount` is controlled\n    props.rowCount != null ||\n    // Always export if the `rowCount` has been initialized\n    props.initialState?.pagination?.rowCount != null;\n    if (!shouldExportRowCount) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        rowCount: exportedRowCount\n      })\n    });\n  }, [apiRef, props.rowCount, props.initialState?.pagination?.rowCount]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const restoredRowCount = context.stateToRestore.pagination?.rowCount ? context.stateToRestore.pagination.rowCount : gridPaginationRowCountSelector(apiRef);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        rowCount: restoredRowCount\n      })\n    }));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(() => {\n    if (props.paginationMode === 'client') {\n      apiRef.current.setRowCount(visibleTopLevelRowCount);\n    } else if (props.rowCount != null) {\n      apiRef.current.setRowCount(props.rowCount);\n    }\n  }, [apiRef, visibleTopLevelRowCount, props.paginationMode, props.rowCount]);\n};","map":{"version":3,"names":["_extends","React","gridFilteredTopLevelRowCountSelector","useGridLogger","useGridSelector","useGridApiMethod","useGridRegisterPipeProcessor","gridPaginationRowCountSelector","noRowCountInServerMode","useGridRowCount","apiRef","props","logger","visibleTopLevelRowCount","rowCount","current","registerControlState","stateId","propModel","propOnChange","onRowCountChange","stateSelector","changeEvent","setRowCount","useCallback","newRowCount","debug","setState","state","pagination","paginationRowCountApi","stateExportPreProcessing","prevState","context","exportedRowCount","shouldExportRowCount","exportOnlyDirtyModels","initialState","stateRestorePreProcessing","params","restoredRowCount","stateToRestore","useEffect","process","env","NODE_ENV","paginationMode"],"sources":["/home/satheesh/Documents/React/lcommerce/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridRowCount.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridFilteredTopLevelRowCountSelector } from '../filter';\nimport { useGridLogger, useGridSelector, useGridApiMethod } from '../../utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPaginationRowCountSelector } from './gridPaginationSelector';\nimport { noRowCountInServerMode } from './gridPaginationUtils';\n\n/**\n * @requires useGridFilter (state)\n * @requires useGridDimensions (event) - can be after\n */\nexport const useGridRowCount = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridRowCount');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);\n  const rowCount = useGridSelector(apiRef, gridPaginationRowCountSelector);\n  apiRef.current.registerControlState({\n    stateId: 'paginationRowCount',\n    propModel: props.rowCount,\n    propOnChange: props.onRowCountChange,\n    stateSelector: gridPaginationRowCountSelector,\n    changeEvent: 'rowCountChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setRowCount = React.useCallback(newRowCount => {\n    if (rowCount === newRowCount) {\n      return;\n    }\n    logger.debug(\"Setting 'rowCount' to\", newRowCount);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        rowCount: newRowCount\n      })\n    }));\n  }, [apiRef, logger, rowCount]);\n  const paginationRowCountApi = {\n    setRowCount\n  };\n  useGridApiMethod(apiRef, paginationRowCountApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const exportedRowCount = gridPaginationRowCountSelector(apiRef);\n    const shouldExportRowCount =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `rowCount` is controlled\n    props.rowCount != null ||\n    // Always export if the `rowCount` has been initialized\n    props.initialState?.pagination?.rowCount != null;\n    if (!shouldExportRowCount) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        rowCount: exportedRowCount\n      })\n    });\n  }, [apiRef, props.rowCount, props.initialState?.pagination?.rowCount]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const restoredRowCount = context.stateToRestore.pagination?.rowCount ? context.stateToRestore.pagination.rowCount : gridPaginationRowCountSelector(apiRef);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        rowCount: restoredRowCount\n      })\n    }));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(() => {\n    if (props.paginationMode === 'client') {\n      apiRef.current.setRowCount(visibleTopLevelRowCount);\n    } else if (props.rowCount != null) {\n      apiRef.current.setRowCount(props.rowCount);\n    }\n  }, [apiRef, visibleTopLevelRowCount, props.paginationMode, props.rowCount]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}