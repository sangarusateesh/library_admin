{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { findGridCellElementsFromCol, findGridElement, findLeftPinnedCellsAfterCol, findRightPinnedCellsBeforeCol, getFieldFromHeaderElem, findHeaderElementFromField, findGroupHeaderElementsFromField, findGridHeader, findGridCells, findParentElementFromClassName, findLeftPinnedHeadersAfterCol, findRightPinnedHeadersBeforeCol } from '../../../utils/domUtils';\nimport { DEFAULT_GRID_AUTOSIZE_OPTIONS } from './gridColumnResizeApi';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiEventHandler, useGridApiMethod, useGridApiOptionHandler, useGridLogger, useGridNativeEventListener, useGridSelector, useOnMount } from '../../utils';\nimport { gridVirtualizationColumnEnabledSelector } from '../virtualization';\nimport { createControllablePromise } from '../../../utils/createControllablePromise';\nimport { clamp } from '../../../utils/utils';\nimport { useTimeout } from '../../utils/useTimeout';\nimport { GridPinnedColumnPosition } from '../columns/gridColumnsInterfaces';\nimport { gridColumnsStateSelector } from '../columns';\n// TODO: remove support for Safari < 13.\n// https://caniuse.com/#search=touch-action\n//\n// Safari, on iOS, supports touch action since v13.\n// Over 80% of the iOS phones are compatible\n// in August 2020.\n// Utilizing the CSS.supports method to check if touch-action is supported.\n// Since CSS.supports is supported on all but Edge@12 and IE and touch-action\n// is supported on both Edge@12 and IE if CSS.supports is not available that means that\n// touch-action will be supported\nlet cachedSupportsTouchActionNone = false;\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === undefined) {\n    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {\n      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n  return cachedSupportsTouchActionNone;\n}\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(separator, direction) {\n  const side = separator.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (direction === 'rtl') {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nfunction preventClick(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n\n/**\n * Checker that returns a promise that resolves when the column virtualization\n * is disabled.\n */\nfunction useColumnVirtualizationDisabled(apiRef) {\n  const promise = React.useRef();\n  const selector = () => gridVirtualizationColumnEnabledSelector(apiRef);\n  const value = useGridSelector(apiRef, selector);\n  React.useEffect(() => {\n    if (promise.current && value === false) {\n      promise.current.resolve();\n      promise.current = undefined;\n    }\n  });\n  const asyncCheck = () => {\n    if (!promise.current) {\n      if (selector() === false) {\n        return Promise.resolve();\n      }\n      promise.current = createControllablePromise();\n    }\n    return promise.current;\n  };\n  return asyncCheck;\n}\n\n/**\n * Basic statistical outlier detection, checks if the value is `F * IQR` away from\n * the Q1 and Q3 boundaries. IQR: interquartile range.\n */\nfunction excludeOutliers(inputValues, factor) {\n  if (inputValues.length < 4) {\n    return inputValues;\n  }\n  const values = inputValues.slice();\n  values.sort((a, b) => a - b);\n  const q1 = values[Math.floor(values.length * 0.25)];\n  const q3 = values[Math.floor(values.length * 0.75) - 1];\n  const iqr = q3 - q1;\n\n  // We make a small adjustment if `iqr < 5` for the cases where the IQR is\n  // very small (for example zero) due to very close by values in the input data.\n  // Otherwise, with an IQR of `0`, anything outside that would be considered\n  // an outlier, but it makes more sense visually to allow for this 5px variance\n  // rather than showing a cropped cell.\n  const deviation = iqr < 5 ? 5 : iqr * factor;\n  return values.filter(v => v > q1 - deviation && v < q3 + deviation);\n}\nfunction extractColumnWidths(apiRef, options, columns) {\n  const widthByField = {};\n  const root = apiRef.current.rootElementRef.current;\n  root.classList.add(gridClasses.autosizing);\n  columns.forEach(column => {\n    const cells = findGridCells(apiRef.current, column.field);\n    const widths = cells.map(cell => {\n      return cell.getBoundingClientRect().width ?? 0;\n    });\n    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);\n    if (options.includeHeaders) {\n      const header = findGridHeader(apiRef.current, column.field);\n      if (header) {\n        const title = header.querySelector(`.${gridClasses.columnHeaderTitle}`);\n        const content = header.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n        const iconContainer = header.querySelector(`.${gridClasses.iconButtonContainer}`);\n        const menuContainer = header.querySelector(`.${gridClasses.menuIcon}`);\n        const element = title ?? content;\n        const style = window.getComputedStyle(header, null);\n        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        const contentWidth = element.scrollWidth + 1;\n        const width = contentWidth + paddingWidth + (iconContainer?.clientWidth ?? 0) + (menuContainer?.clientWidth ?? 0);\n        filteredWidths.push(width);\n      }\n    }\n    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;\n    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;\n    const min = hasColumnMin ? column.minWidth : 0;\n    const max = hasColumnMax ? column.maxWidth : Infinity;\n    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);\n    widthByField[column.field] = clamp(maxContent, min, max);\n  });\n  root.classList.remove(gridClasses.autosizing);\n  return widthByField;\n}\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nexport const useGridColumnResize = (apiRef, props) => {\n  const theme = useTheme();\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const colDefRef = React.useRef();\n  const previousMouseClickEvent = React.useRef();\n  const columnHeaderElementRef = React.useRef();\n  const headerFilterElementRef = React.useRef();\n  const groupHeaderElementsRef = React.useRef([]);\n  const cellElementsRef = React.useRef([]);\n  const leftPinnedCellsAfterRef = React.useRef([]);\n  const rightPinnedCellsBeforeRef = React.useRef([]);\n  const fillerLeftRef = React.useRef();\n  const fillerRightRef = React.useRef();\n  const leftPinnedHeadersAfterRef = React.useRef([]);\n  const rightPinnedHeadersBeforeRef = React.useRef([]);\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef();\n  const resizeDirection = React.useRef();\n  const stopResizeEventTimeout = useTimeout();\n  const touchId = React.useRef();\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${colDefRef.current.field}`);\n    const prevWidth = columnHeaderElementRef.current.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    colDefRef.current.computedWidth = newWidth;\n    colDefRef.current.width = newWidth;\n    colDefRef.current.flex = 0;\n    columnHeaderElementRef.current.style.width = `${newWidth}px`;\n    columnHeaderElementRef.current.style.minWidth = `${newWidth}px`;\n    columnHeaderElementRef.current.style.maxWidth = `${newWidth}px`;\n    const headerFilterElement = headerFilterElementRef.current;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n      headerFilterElement.style.minWidth = `${newWidth}px`;\n      headerFilterElement.style.maxWidth = `${newWidth}px`;\n    }\n    groupHeaderElementsRef.current.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.width = finalWidth;\n      div.style.minWidth = finalWidth;\n      div.style.maxWidth = finalWidth;\n    });\n    cellElementsRef.current.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.setProperty('--width', finalWidth);\n    });\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, colDefRef.current.field);\n    if (pinnedPosition === GridPinnedColumnPosition.LEFT) {\n      updateProperty(fillerLeftRef.current, 'width', widthDiff);\n      leftPinnedCellsAfterRef.current.forEach(cell => {\n        updateProperty(cell, 'left', widthDiff);\n      });\n      leftPinnedHeadersAfterRef.current.forEach(header => {\n        updateProperty(header, 'left', widthDiff);\n      });\n    }\n    if (pinnedPosition === GridPinnedColumnPosition.RIGHT) {\n      updateProperty(fillerRightRef.current, 'width', widthDiff);\n      rightPinnedCellsBeforeRef.current.forEach(cell => {\n        updateProperty(cell, 'right', widthDiff);\n      });\n      rightPinnedHeadersBeforeRef.current.forEach(header => {\n        updateProperty(header, 'right', widthDiff);\n      });\n    }\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n\n    // Prevent double-clicks from being interpreted as two separate clicks\n    if (previousMouseClickEvent.current) {\n      const prevEvent = previousMouseClickEvent.current;\n      const prevTimeStamp = prevEvent.timeStamp;\n      const prevClientX = prevEvent.clientX;\n      const prevClientY = prevEvent.clientY;\n\n      // Check if the current event is part of a double-click\n      if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {\n        previousMouseClickEvent.current = undefined;\n        return;\n      }\n    }\n    if (colDefRef.current) {\n      apiRef.current.setColumnWidth(colDefRef.current.field, colDefRef.current.width);\n      logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n    }\n    stopResizeEventTimeout.start(0, () => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n  };\n  const storeReferences = (colDef, separator, xStart) => {\n    const root = apiRef.current.rootElementRef.current;\n    colDefRef.current = colDef;\n    columnHeaderElementRef.current = findHeaderElementFromField(apiRef.current.columnHeadersContainerRef.current, colDef.field);\n    const headerFilterElement = root.querySelector(`.${gridClasses.headerFilterRow} [data-field=\"${colDef.field}\"]`);\n    if (headerFilterElement) {\n      headerFilterElementRef.current = headerFilterElement;\n    }\n    groupHeaderElementsRef.current = findGroupHeaderElementsFromField(apiRef.current.columnHeadersContainerRef?.current, colDef.field);\n    cellElementsRef.current = findGridCellElementsFromCol(columnHeaderElementRef.current, apiRef.current);\n    fillerLeftRef.current = findGridElement(apiRef.current, 'filler--pinnedLeft');\n    fillerRightRef.current = findGridElement(apiRef.current, 'filler--pinnedRight');\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, colDefRef.current.field);\n    leftPinnedCellsAfterRef.current = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedCellsAfterCol(apiRef.current, columnHeaderElementRef.current);\n    rightPinnedCellsBeforeRef.current = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedCellsBeforeCol(apiRef.current, columnHeaderElementRef.current);\n    leftPinnedHeadersAfterRef.current = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedHeadersAfterCol(apiRef.current, columnHeaderElementRef.current);\n    rightPinnedHeadersBeforeRef.current = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedHeadersBeforeCol(apiRef.current, columnHeaderElementRef.current);\n    resizeDirection.current = getResizeDirection(separator, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, columnHeaderElementRef.current.getBoundingClientRect(), resizeDirection.current);\n  };\n  const handleResizeMouseUp = useEventCallback(finishResize);\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, columnHeaderElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: columnHeaderElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, columnHeaderElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: columnHeaderElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    // If touch-action: none; is not supported we need to prevent the scroll manually.\n    if (!doesSupportTouchActionNone()) {\n      event.preventDefault();\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    const columnHeaderElement = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(columnHeaderElement);\n    const colDef = apiRef.current.getColumn(field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    storeReferences(colDef, cellSeparator, touch.clientX);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    // The click event runs right after the mouseup event, we want to wait until it\n    // has been canceled before removing our handler.\n    setTimeout(() => {\n      doc.removeEventListener('click', preventClick, true);\n    }, 100);\n    if (columnHeaderElementRef.current) {\n      columnHeaderElementRef.current.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, columnHeaderElementRef, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleColumnResizeMouseDown = useEventCallback(({\n    colDef\n  }, event) => {\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    storeReferences(colDef, event.currentTarget, event.clientX);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    previousMouseClickEvent.current = event.nativeEvent;\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Prevent the click event if we have resized the column.\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    doc.addEventListener('click', preventClick, true);\n  });\n  const handleColumnSeparatorDoubleClick = useEventCallback((params, event) => {\n    if (props.disableAutosize) {\n      return;\n    }\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n    const column = apiRef.current.state.columns.lookup[params.field];\n    if (column.resizable === false) {\n      return;\n    }\n    apiRef.current.autosizeColumns(_extends({}, props.autosizeOptions, {\n      columns: [column.field]\n    }));\n  });\n\n  /**\n   * API METHODS\n   */\n\n  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);\n  const isAutosizingRef = React.useRef(false);\n  const autosizeColumns = React.useCallback(async userOptions => {\n    const root = apiRef.current.rootElementRef?.current;\n    if (!root) {\n      return;\n    }\n    if (isAutosizingRef.current) {\n      return;\n    }\n    isAutosizingRef.current = true;\n    const state = gridColumnsStateSelector(apiRef.current.state);\n    const options = _extends({}, DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {\n      columns: userOptions?.columns ?? state.orderedFields\n    });\n    options.columns = options.columns.filter(c => state.columnVisibilityModel[c] !== false);\n    const columns = options.columns.map(c => apiRef.current.state.columns.lookup[c]);\n    try {\n      apiRef.current.unstable_setColumnVirtualization(false);\n      await columnVirtualizationDisabled();\n      const widthByField = extractColumnWidths(apiRef, options, columns);\n      const newColumns = columns.map(column => _extends({}, column, {\n        width: widthByField[column.field],\n        computedWidth: widthByField[column.field]\n      }));\n      if (options.expand) {\n        const visibleColumns = state.orderedFields.map(field => state.lookup[field]).filter(c => state.columnVisibilityModel[c.field] !== false);\n        const totalWidth = visibleColumns.reduce((total, column) => total + (widthByField[column.field] ?? column.computedWidth ?? column.width), 0);\n        const availableWidth = apiRef.current.getRootDimensions().viewportInnerSize.width;\n        const remainingWidth = availableWidth - totalWidth;\n        if (remainingWidth > 0) {\n          const widthPerColumn = remainingWidth / (newColumns.length || 1);\n          newColumns.forEach(column => {\n            column.width += widthPerColumn;\n            column.computedWidth += widthPerColumn;\n          });\n        }\n      }\n      apiRef.current.updateColumns(newColumns);\n      newColumns.forEach((newColumn, index) => {\n        if (newColumn.width !== columns[index].width) {\n          const width = newColumn.width;\n          apiRef.current.publishEvent('columnWidthChange', {\n            element: apiRef.current.getColumnHeaderElement(newColumn.field),\n            colDef: newColumn,\n            width\n          });\n        }\n      });\n    } finally {\n      apiRef.current.unstable_setColumnVirtualization(true);\n      isAutosizingRef.current = false;\n    }\n  }, [apiRef, columnVirtualizationDisabled]);\n\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => stopListening, [stopListening]);\n  useOnMount(() => {\n    if (props.autosizeOnMount) {\n      Promise.resolve().then(() => {\n        apiRef.current.autosizeColumns(props.autosizeOptions);\n      });\n    }\n  });\n  useGridNativeEventListener(apiRef, () => apiRef.current.columnHeadersContainerRef?.current, 'touchstart', handleTouchStart, {\n    passive: doesSupportTouchActionNone()\n  });\n  useGridApiMethod(apiRef, {\n    autosizeColumns\n  }, 'public');\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridApiEventHandler(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);\n  useGridApiOptionHandler(apiRef, 'columnResize', props.onColumnResize);\n  useGridApiOptionHandler(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};\nfunction updateProperty(element, property, delta) {\n  if (!element) {\n    return;\n  }\n  element.style[property] = `${parseInt(element.style[property], 10) + delta}px`;\n}","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","unstable_useEventCallback","useEventCallback","useTheme","findGridCellElementsFromCol","findGridElement","findLeftPinnedCellsAfterCol","findRightPinnedCellsBeforeCol","getFieldFromHeaderElem","findHeaderElementFromField","findGroupHeaderElementsFromField","findGridHeader","findGridCells","findParentElementFromClassName","findLeftPinnedHeadersAfterCol","findRightPinnedHeadersBeforeCol","DEFAULT_GRID_AUTOSIZE_OPTIONS","gridClasses","useGridApiEventHandler","useGridApiMethod","useGridApiOptionHandler","useGridLogger","useGridNativeEventListener","useGridSelector","useOnMount","gridVirtualizationColumnEnabledSelector","createControllablePromise","clamp","useTimeout","GridPinnedColumnPosition","gridColumnsStateSelector","cachedSupportsTouchActionNone","doesSupportTouchActionNone","undefined","CSS","supports","trackFinger","event","currentTouchId","changedTouches","i","length","touch","identifier","x","clientX","y","clientY","computeNewWidth","initialOffsetToSeparator","clickX","columnBounds","resizeDirection","newWidth","left","right","computeOffsetToSeparator","flipResizeDirection","side","getResizeDirection","separator","direction","classList","contains","preventClick","preventDefault","stopImmediatePropagation","useColumnVirtualizationDisabled","apiRef","promise","useRef","selector","value","useEffect","current","resolve","asyncCheck","Promise","excludeOutliers","inputValues","factor","values","slice","sort","a","b","q1","Math","floor","q3","iqr","deviation","filter","v","extractColumnWidths","options","columns","widthByField","root","rootElementRef","add","autosizing","forEach","column","cells","field","widths","map","cell","getBoundingClientRect","width","filteredWidths","includeOutliers","outliersFactor","includeHeaders","header","title","querySelector","columnHeaderTitle","content","columnHeaderTitleContainerContent","iconContainer","iconButtonContainer","menuContainer","menuIcon","element","style","window","getComputedStyle","paddingWidth","parseInt","paddingLeft","paddingRight","contentWidth","scrollWidth","clientWidth","push","hasColumnMin","minWidth","Infinity","hasColumnMax","maxWidth","min","max","maxContent","remove","columnResizeStateInitializer","state","columnResize","resizingColumnField","useGridColumnResize","props","theme","logger","colDefRef","previousMouseClickEvent","columnHeaderElementRef","headerFilterElementRef","groupHeaderElementsRef","cellElementsRef","leftPinnedCellsAfterRef","rightPinnedCellsBeforeRef","fillerLeftRef","fillerRightRef","leftPinnedHeadersAfterRef","rightPinnedHeadersBeforeRef","stopResizeEventTimeout","touchId","updateWidth","debug","prevWidth","offsetWidth","widthDiff","computedWidth","flex","headerFilterElement","div","finalWidth","getAttribute","setProperty","pinnedPosition","unstable_applyPipeProcessors","LEFT","updateProperty","RIGHT","finishResize","nativeEvent","stopListening","prevEvent","prevTimeStamp","timeStamp","prevClientX","prevClientY","setColumnWidth","start","publishEvent","storeReferences","colDef","xStart","columnHeadersContainerRef","headerFilterRow","handleResizeMouseUp","handleResizeMouseMove","buttons","params","handleTouchEnd","finger","handleTouchMove","type","handleTouchStart","cellSeparator","target","columnHeaderElement","columnHeader","getColumn","doc","currentTarget","addEventListener","useCallback","body","removeProperty","removeEventListener","setTimeout","pointerEvents","handleResizeStart","setState","forceUpdate","handleResizeStop","handleColumnResizeMouseDown","button","cursor","handleColumnSeparatorDoubleClick","disableAutosize","lookup","resizable","autosizeColumns","autosizeOptions","columnVirtualizationDisabled","isAutosizingRef","userOptions","orderedFields","c","columnVisibilityModel","unstable_setColumnVirtualization","newColumns","expand","visibleColumns","totalWidth","reduce","total","availableWidth","getRootDimensions","viewportInnerSize","remainingWidth","widthPerColumn","updateColumns","newColumn","index","getColumnHeaderElement","autosizeOnMount","then","passive","onColumnResize","onColumnWidthChange","property","delta"],"sources":["/home/satheesh/Documents/React/lcommerce/node_modules/@mui/x-data-grid/hooks/features/columnResize/useGridColumnResize.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { findGridCellElementsFromCol, findGridElement, findLeftPinnedCellsAfterCol, findRightPinnedCellsBeforeCol, getFieldFromHeaderElem, findHeaderElementFromField, findGroupHeaderElementsFromField, findGridHeader, findGridCells, findParentElementFromClassName, findLeftPinnedHeadersAfterCol, findRightPinnedHeadersBeforeCol } from '../../../utils/domUtils';\nimport { DEFAULT_GRID_AUTOSIZE_OPTIONS } from './gridColumnResizeApi';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiEventHandler, useGridApiMethod, useGridApiOptionHandler, useGridLogger, useGridNativeEventListener, useGridSelector, useOnMount } from '../../utils';\nimport { gridVirtualizationColumnEnabledSelector } from '../virtualization';\nimport { createControllablePromise } from '../../../utils/createControllablePromise';\nimport { clamp } from '../../../utils/utils';\nimport { useTimeout } from '../../utils/useTimeout';\nimport { GridPinnedColumnPosition } from '../columns/gridColumnsInterfaces';\nimport { gridColumnsStateSelector } from '../columns';\n// TODO: remove support for Safari < 13.\n// https://caniuse.com/#search=touch-action\n//\n// Safari, on iOS, supports touch action since v13.\n// Over 80% of the iOS phones are compatible\n// in August 2020.\n// Utilizing the CSS.supports method to check if touch-action is supported.\n// Since CSS.supports is supported on all but Edge@12 and IE and touch-action\n// is supported on both Edge@12 and IE if CSS.supports is not available that means that\n// touch-action will be supported\nlet cachedSupportsTouchActionNone = false;\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === undefined) {\n    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {\n      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n  return cachedSupportsTouchActionNone;\n}\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(separator, direction) {\n  const side = separator.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (direction === 'rtl') {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nfunction preventClick(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n\n/**\n * Checker that returns a promise that resolves when the column virtualization\n * is disabled.\n */\nfunction useColumnVirtualizationDisabled(apiRef) {\n  const promise = React.useRef();\n  const selector = () => gridVirtualizationColumnEnabledSelector(apiRef);\n  const value = useGridSelector(apiRef, selector);\n  React.useEffect(() => {\n    if (promise.current && value === false) {\n      promise.current.resolve();\n      promise.current = undefined;\n    }\n  });\n  const asyncCheck = () => {\n    if (!promise.current) {\n      if (selector() === false) {\n        return Promise.resolve();\n      }\n      promise.current = createControllablePromise();\n    }\n    return promise.current;\n  };\n  return asyncCheck;\n}\n\n/**\n * Basic statistical outlier detection, checks if the value is `F * IQR` away from\n * the Q1 and Q3 boundaries. IQR: interquartile range.\n */\nfunction excludeOutliers(inputValues, factor) {\n  if (inputValues.length < 4) {\n    return inputValues;\n  }\n  const values = inputValues.slice();\n  values.sort((a, b) => a - b);\n  const q1 = values[Math.floor(values.length * 0.25)];\n  const q3 = values[Math.floor(values.length * 0.75) - 1];\n  const iqr = q3 - q1;\n\n  // We make a small adjustment if `iqr < 5` for the cases where the IQR is\n  // very small (for example zero) due to very close by values in the input data.\n  // Otherwise, with an IQR of `0`, anything outside that would be considered\n  // an outlier, but it makes more sense visually to allow for this 5px variance\n  // rather than showing a cropped cell.\n  const deviation = iqr < 5 ? 5 : iqr * factor;\n  return values.filter(v => v > q1 - deviation && v < q3 + deviation);\n}\nfunction extractColumnWidths(apiRef, options, columns) {\n  const widthByField = {};\n  const root = apiRef.current.rootElementRef.current;\n  root.classList.add(gridClasses.autosizing);\n  columns.forEach(column => {\n    const cells = findGridCells(apiRef.current, column.field);\n    const widths = cells.map(cell => {\n      return cell.getBoundingClientRect().width ?? 0;\n    });\n    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);\n    if (options.includeHeaders) {\n      const header = findGridHeader(apiRef.current, column.field);\n      if (header) {\n        const title = header.querySelector(`.${gridClasses.columnHeaderTitle}`);\n        const content = header.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n        const iconContainer = header.querySelector(`.${gridClasses.iconButtonContainer}`);\n        const menuContainer = header.querySelector(`.${gridClasses.menuIcon}`);\n        const element = title ?? content;\n        const style = window.getComputedStyle(header, null);\n        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        const contentWidth = element.scrollWidth + 1;\n        const width = contentWidth + paddingWidth + (iconContainer?.clientWidth ?? 0) + (menuContainer?.clientWidth ?? 0);\n        filteredWidths.push(width);\n      }\n    }\n    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;\n    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;\n    const min = hasColumnMin ? column.minWidth : 0;\n    const max = hasColumnMax ? column.maxWidth : Infinity;\n    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);\n    widthByField[column.field] = clamp(maxContent, min, max);\n  });\n  root.classList.remove(gridClasses.autosizing);\n  return widthByField;\n}\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nexport const useGridColumnResize = (apiRef, props) => {\n  const theme = useTheme();\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const colDefRef = React.useRef();\n  const previousMouseClickEvent = React.useRef();\n  const columnHeaderElementRef = React.useRef();\n  const headerFilterElementRef = React.useRef();\n  const groupHeaderElementsRef = React.useRef([]);\n  const cellElementsRef = React.useRef([]);\n  const leftPinnedCellsAfterRef = React.useRef([]);\n  const rightPinnedCellsBeforeRef = React.useRef([]);\n  const fillerLeftRef = React.useRef();\n  const fillerRightRef = React.useRef();\n  const leftPinnedHeadersAfterRef = React.useRef([]);\n  const rightPinnedHeadersBeforeRef = React.useRef([]);\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef();\n  const resizeDirection = React.useRef();\n  const stopResizeEventTimeout = useTimeout();\n  const touchId = React.useRef();\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${colDefRef.current.field}`);\n    const prevWidth = columnHeaderElementRef.current.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    colDefRef.current.computedWidth = newWidth;\n    colDefRef.current.width = newWidth;\n    colDefRef.current.flex = 0;\n    columnHeaderElementRef.current.style.width = `${newWidth}px`;\n    columnHeaderElementRef.current.style.minWidth = `${newWidth}px`;\n    columnHeaderElementRef.current.style.maxWidth = `${newWidth}px`;\n    const headerFilterElement = headerFilterElementRef.current;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n      headerFilterElement.style.minWidth = `${newWidth}px`;\n      headerFilterElement.style.maxWidth = `${newWidth}px`;\n    }\n    groupHeaderElementsRef.current.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.width = finalWidth;\n      div.style.minWidth = finalWidth;\n      div.style.maxWidth = finalWidth;\n    });\n    cellElementsRef.current.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.setProperty('--width', finalWidth);\n    });\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, colDefRef.current.field);\n    if (pinnedPosition === GridPinnedColumnPosition.LEFT) {\n      updateProperty(fillerLeftRef.current, 'width', widthDiff);\n      leftPinnedCellsAfterRef.current.forEach(cell => {\n        updateProperty(cell, 'left', widthDiff);\n      });\n      leftPinnedHeadersAfterRef.current.forEach(header => {\n        updateProperty(header, 'left', widthDiff);\n      });\n    }\n    if (pinnedPosition === GridPinnedColumnPosition.RIGHT) {\n      updateProperty(fillerRightRef.current, 'width', widthDiff);\n      rightPinnedCellsBeforeRef.current.forEach(cell => {\n        updateProperty(cell, 'right', widthDiff);\n      });\n      rightPinnedHeadersBeforeRef.current.forEach(header => {\n        updateProperty(header, 'right', widthDiff);\n      });\n    }\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n\n    // Prevent double-clicks from being interpreted as two separate clicks\n    if (previousMouseClickEvent.current) {\n      const prevEvent = previousMouseClickEvent.current;\n      const prevTimeStamp = prevEvent.timeStamp;\n      const prevClientX = prevEvent.clientX;\n      const prevClientY = prevEvent.clientY;\n\n      // Check if the current event is part of a double-click\n      if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {\n        previousMouseClickEvent.current = undefined;\n        return;\n      }\n    }\n    if (colDefRef.current) {\n      apiRef.current.setColumnWidth(colDefRef.current.field, colDefRef.current.width);\n      logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n    }\n    stopResizeEventTimeout.start(0, () => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n  };\n  const storeReferences = (colDef, separator, xStart) => {\n    const root = apiRef.current.rootElementRef.current;\n    colDefRef.current = colDef;\n    columnHeaderElementRef.current = findHeaderElementFromField(apiRef.current.columnHeadersContainerRef.current, colDef.field);\n    const headerFilterElement = root.querySelector(`.${gridClasses.headerFilterRow} [data-field=\"${colDef.field}\"]`);\n    if (headerFilterElement) {\n      headerFilterElementRef.current = headerFilterElement;\n    }\n    groupHeaderElementsRef.current = findGroupHeaderElementsFromField(apiRef.current.columnHeadersContainerRef?.current, colDef.field);\n    cellElementsRef.current = findGridCellElementsFromCol(columnHeaderElementRef.current, apiRef.current);\n    fillerLeftRef.current = findGridElement(apiRef.current, 'filler--pinnedLeft');\n    fillerRightRef.current = findGridElement(apiRef.current, 'filler--pinnedRight');\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, colDefRef.current.field);\n    leftPinnedCellsAfterRef.current = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedCellsAfterCol(apiRef.current, columnHeaderElementRef.current);\n    rightPinnedCellsBeforeRef.current = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedCellsBeforeCol(apiRef.current, columnHeaderElementRef.current);\n    leftPinnedHeadersAfterRef.current = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedHeadersAfterCol(apiRef.current, columnHeaderElementRef.current);\n    rightPinnedHeadersBeforeRef.current = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedHeadersBeforeCol(apiRef.current, columnHeaderElementRef.current);\n    resizeDirection.current = getResizeDirection(separator, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, columnHeaderElementRef.current.getBoundingClientRect(), resizeDirection.current);\n  };\n  const handleResizeMouseUp = useEventCallback(finishResize);\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, columnHeaderElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: columnHeaderElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, columnHeaderElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: columnHeaderElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    // If touch-action: none; is not supported we need to prevent the scroll manually.\n    if (!doesSupportTouchActionNone()) {\n      event.preventDefault();\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    const columnHeaderElement = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(columnHeaderElement);\n    const colDef = apiRef.current.getColumn(field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    storeReferences(colDef, cellSeparator, touch.clientX);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    // The click event runs right after the mouseup event, we want to wait until it\n    // has been canceled before removing our handler.\n    setTimeout(() => {\n      doc.removeEventListener('click', preventClick, true);\n    }, 100);\n    if (columnHeaderElementRef.current) {\n      columnHeaderElementRef.current.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, columnHeaderElementRef, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleColumnResizeMouseDown = useEventCallback(({\n    colDef\n  }, event) => {\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    storeReferences(colDef, event.currentTarget, event.clientX);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    previousMouseClickEvent.current = event.nativeEvent;\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Prevent the click event if we have resized the column.\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    doc.addEventListener('click', preventClick, true);\n  });\n  const handleColumnSeparatorDoubleClick = useEventCallback((params, event) => {\n    if (props.disableAutosize) {\n      return;\n    }\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n    const column = apiRef.current.state.columns.lookup[params.field];\n    if (column.resizable === false) {\n      return;\n    }\n    apiRef.current.autosizeColumns(_extends({}, props.autosizeOptions, {\n      columns: [column.field]\n    }));\n  });\n\n  /**\n   * API METHODS\n   */\n\n  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);\n  const isAutosizingRef = React.useRef(false);\n  const autosizeColumns = React.useCallback(async userOptions => {\n    const root = apiRef.current.rootElementRef?.current;\n    if (!root) {\n      return;\n    }\n    if (isAutosizingRef.current) {\n      return;\n    }\n    isAutosizingRef.current = true;\n    const state = gridColumnsStateSelector(apiRef.current.state);\n    const options = _extends({}, DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {\n      columns: userOptions?.columns ?? state.orderedFields\n    });\n    options.columns = options.columns.filter(c => state.columnVisibilityModel[c] !== false);\n    const columns = options.columns.map(c => apiRef.current.state.columns.lookup[c]);\n    try {\n      apiRef.current.unstable_setColumnVirtualization(false);\n      await columnVirtualizationDisabled();\n      const widthByField = extractColumnWidths(apiRef, options, columns);\n      const newColumns = columns.map(column => _extends({}, column, {\n        width: widthByField[column.field],\n        computedWidth: widthByField[column.field]\n      }));\n      if (options.expand) {\n        const visibleColumns = state.orderedFields.map(field => state.lookup[field]).filter(c => state.columnVisibilityModel[c.field] !== false);\n        const totalWidth = visibleColumns.reduce((total, column) => total + (widthByField[column.field] ?? column.computedWidth ?? column.width), 0);\n        const availableWidth = apiRef.current.getRootDimensions().viewportInnerSize.width;\n        const remainingWidth = availableWidth - totalWidth;\n        if (remainingWidth > 0) {\n          const widthPerColumn = remainingWidth / (newColumns.length || 1);\n          newColumns.forEach(column => {\n            column.width += widthPerColumn;\n            column.computedWidth += widthPerColumn;\n          });\n        }\n      }\n      apiRef.current.updateColumns(newColumns);\n      newColumns.forEach((newColumn, index) => {\n        if (newColumn.width !== columns[index].width) {\n          const width = newColumn.width;\n          apiRef.current.publishEvent('columnWidthChange', {\n            element: apiRef.current.getColumnHeaderElement(newColumn.field),\n            colDef: newColumn,\n            width\n          });\n        }\n      });\n    } finally {\n      apiRef.current.unstable_setColumnVirtualization(true);\n      isAutosizingRef.current = false;\n    }\n  }, [apiRef, columnVirtualizationDisabled]);\n\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => stopListening, [stopListening]);\n  useOnMount(() => {\n    if (props.autosizeOnMount) {\n      Promise.resolve().then(() => {\n        apiRef.current.autosizeColumns(props.autosizeOptions);\n      });\n    }\n  });\n  useGridNativeEventListener(apiRef, () => apiRef.current.columnHeadersContainerRef?.current, 'touchstart', handleTouchStart, {\n    passive: doesSupportTouchActionNone()\n  });\n  useGridApiMethod(apiRef, {\n    autosizeColumns\n  }, 'public');\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridApiEventHandler(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);\n  useGridApiOptionHandler(apiRef, 'columnResize', props.onColumnResize);\n  useGridApiOptionHandler(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};\nfunction updateProperty(element, property, delta) {\n  if (!element) {\n    return;\n  }\n  element.style[property] = `${parseInt(element.style[property], 10) + delta}px`;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}