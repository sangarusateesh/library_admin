{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\nexport const useGridColumnSpanning = apiRef => {\n  const lookup = React.useRef({});\n  const getCellColSpanInfo = (rowId, columnIndex) => {\n    return lookup.current[rowId]?.[columnIndex];\n  };\n\n  // Calculate `colSpan` for each cell in the row\n  const calculateColSpan = React.useCallback(({\n    rowId,\n    minFirstColumn,\n    maxLastColumn,\n    columns\n  }) => {\n    for (let i = minFirstColumn; i < maxLastColumn; i += 1) {\n      const cellProps = calculateCellColSpan({\n        apiRef,\n        lookup: lookup.current,\n        columnIndex: i,\n        rowId,\n        minFirstColumnIndex: minFirstColumn,\n        maxLastColumnIndex: maxLastColumn,\n        columns\n      });\n      if (cellProps.colSpan > 1) {\n        i += cellProps.colSpan - 1;\n      }\n    }\n  }, [apiRef]);\n  const columnSpanningPublicApi = {\n    unstable_getCellColSpanInfo: getCellColSpanInfo\n  };\n  const columnSpanningPrivateApi = {\n    calculateColSpan\n  };\n  useGridApiMethod(apiRef, columnSpanningPublicApi, 'public');\n  useGridApiMethod(apiRef, columnSpanningPrivateApi, 'private');\n  const handleColumnReorderChange = React.useCallback(() => {\n    // `colSpan` needs to be recalculated after column reordering\n    lookup.current = {};\n  }, []);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', handleColumnReorderChange);\n};\nfunction calculateCellColSpan(params) {\n  const {\n    apiRef,\n    lookup,\n    columnIndex,\n    rowId,\n    minFirstColumnIndex,\n    maxLastColumnIndex,\n    columns\n  } = params;\n  const columnsLength = columns.length;\n  const column = columns[columnIndex];\n  const row = apiRef.current.getRow(rowId);\n  const value = apiRef.current.getRowValue(row, column);\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(value, row, column, apiRef) : column.colSpan;\n  if (!colSpan || colSpan === 1) {\n    setCellColSpanInfo(lookup, rowId, columnIndex, {\n      spannedByColSpan: false,\n      cellProps: {\n        colSpan: 1,\n        width: column.computedWidth\n      }\n    });\n    return {\n      colSpan: 1\n    };\n  }\n  let width = column.computedWidth;\n  for (let j = 1; j < colSpan; j += 1) {\n    const nextColumnIndex = columnIndex + j;\n    // Cells should be spanned only within their column section (left-pinned, right-pinned and unpinned).\n    if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {\n      const nextColumn = columns[nextColumnIndex];\n      width += nextColumn.computedWidth;\n      setCellColSpanInfo(lookup, rowId, columnIndex + j, {\n        spannedByColSpan: true,\n        rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),\n        leftVisibleCellIndex: columnIndex\n      });\n    }\n    setCellColSpanInfo(lookup, rowId, columnIndex, {\n      spannedByColSpan: false,\n      cellProps: {\n        colSpan,\n        width\n      }\n    });\n  }\n  return {\n    colSpan\n  };\n}\nfunction setCellColSpanInfo(lookup, rowId, columnIndex, cellColSpanInfo) {\n  if (!lookup[rowId]) {\n    lookup[rowId] = {};\n  }\n  lookup[rowId][columnIndex] = cellColSpanInfo;\n}","map":{"version":3,"names":["React","useGridApiMethod","useGridApiEventHandler","useGridColumnSpanning","apiRef","lookup","useRef","getCellColSpanInfo","rowId","columnIndex","current","calculateColSpan","useCallback","minFirstColumn","maxLastColumn","columns","i","cellProps","calculateCellColSpan","minFirstColumnIndex","maxLastColumnIndex","colSpan","columnSpanningPublicApi","unstable_getCellColSpanInfo","columnSpanningPrivateApi","handleColumnReorderChange","params","columnsLength","length","column","row","getRow","value","getRowValue","setCellColSpanInfo","spannedByColSpan","width","computedWidth","j","nextColumnIndex","nextColumn","rightVisibleCellIndex","Math","min","leftVisibleCellIndex","cellColSpanInfo"],"sources":["/home/satheesh/Documents/React/lcommerce/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumnSpanning.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\nexport const useGridColumnSpanning = apiRef => {\n  const lookup = React.useRef({});\n  const getCellColSpanInfo = (rowId, columnIndex) => {\n    return lookup.current[rowId]?.[columnIndex];\n  };\n\n  // Calculate `colSpan` for each cell in the row\n  const calculateColSpan = React.useCallback(({\n    rowId,\n    minFirstColumn,\n    maxLastColumn,\n    columns\n  }) => {\n    for (let i = minFirstColumn; i < maxLastColumn; i += 1) {\n      const cellProps = calculateCellColSpan({\n        apiRef,\n        lookup: lookup.current,\n        columnIndex: i,\n        rowId,\n        minFirstColumnIndex: minFirstColumn,\n        maxLastColumnIndex: maxLastColumn,\n        columns\n      });\n      if (cellProps.colSpan > 1) {\n        i += cellProps.colSpan - 1;\n      }\n    }\n  }, [apiRef]);\n  const columnSpanningPublicApi = {\n    unstable_getCellColSpanInfo: getCellColSpanInfo\n  };\n  const columnSpanningPrivateApi = {\n    calculateColSpan\n  };\n  useGridApiMethod(apiRef, columnSpanningPublicApi, 'public');\n  useGridApiMethod(apiRef, columnSpanningPrivateApi, 'private');\n  const handleColumnReorderChange = React.useCallback(() => {\n    // `colSpan` needs to be recalculated after column reordering\n    lookup.current = {};\n  }, []);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', handleColumnReorderChange);\n};\nfunction calculateCellColSpan(params) {\n  const {\n    apiRef,\n    lookup,\n    columnIndex,\n    rowId,\n    minFirstColumnIndex,\n    maxLastColumnIndex,\n    columns\n  } = params;\n  const columnsLength = columns.length;\n  const column = columns[columnIndex];\n  const row = apiRef.current.getRow(rowId);\n  const value = apiRef.current.getRowValue(row, column);\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(value, row, column, apiRef) : column.colSpan;\n  if (!colSpan || colSpan === 1) {\n    setCellColSpanInfo(lookup, rowId, columnIndex, {\n      spannedByColSpan: false,\n      cellProps: {\n        colSpan: 1,\n        width: column.computedWidth\n      }\n    });\n    return {\n      colSpan: 1\n    };\n  }\n  let width = column.computedWidth;\n  for (let j = 1; j < colSpan; j += 1) {\n    const nextColumnIndex = columnIndex + j;\n    // Cells should be spanned only within their column section (left-pinned, right-pinned and unpinned).\n    if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {\n      const nextColumn = columns[nextColumnIndex];\n      width += nextColumn.computedWidth;\n      setCellColSpanInfo(lookup, rowId, columnIndex + j, {\n        spannedByColSpan: true,\n        rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),\n        leftVisibleCellIndex: columnIndex\n      });\n    }\n    setCellColSpanInfo(lookup, rowId, columnIndex, {\n      spannedByColSpan: false,\n      cellProps: {\n        colSpan,\n        width\n      }\n    });\n  }\n  return {\n    colSpan\n  };\n}\nfunction setCellColSpanInfo(lookup, rowId, columnIndex, cellColSpanInfo) {\n  if (!lookup[rowId]) {\n    lookup[rowId] = {};\n  }\n  lookup[rowId][columnIndex] = cellColSpanInfo;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}